{"docstore/metadata": {"0c24da50-9093-4620-be33-74764265cfd9": {"doc_hash": "30125ba10a95213603bd008f410aed859c7ae760991aae99df5614bec634050a"}, "88c91ea4-ae52-4660-a48f-d172367a596b": {"doc_hash": "146886c1a18ac09097da6e719e6bfa4d07336de7b7581961de36eefe4f993ebb"}, "1e48d29b-0193-4de6-b864-3e6047cf11eb": {"doc_hash": "66f9823b92662136cb3a97850eb5ca6f0059b5edf66cd1f485bec51afc81ba0a"}, "dff73b6a-d0c1-4676-9afa-7eaabc4483ed": {"doc_hash": "863a9d8711149fa982c22e4aee6d9792537d07e02d8df03f293e3522b24e367f"}, "dc42e523-2fe3-406d-983e-a6bae80067af": {"doc_hash": "1a64eda223122d264afbc4a5e67a42fc7ffaccfacdbfe8d85c3c307e3f94a7c1"}, "6191df8c-b33d-4146-98c1-33a538b91568": {"doc_hash": "f302b813698d6f3ba0ea768c372657bd64528478266345c16c30efc76f7a37f1"}, "aed56cc0-11b1-4701-a759-feff0d07baf4": {"doc_hash": "777b5f411840024da6860a0e0bc10457c51e7daae878ba4a9a3bde82e3cd8ba6"}, "9bac7d87-7580-4fc4-8528-00a106211bb6": {"doc_hash": "8720997eec913756ccb1d0d387a28516ce3396d2eac9ac014c373dbf82c7e1bf"}, "f5c22416-0b79-45b0-a643-e519197bff81": {"doc_hash": "64579516b11513dd14a9f36c306c365edf68fbbda9a116d03d2b4bc67aba6719"}, "9f66f562-b6ba-4a73-bcb3-d87169df4ec0": {"doc_hash": "e40a33223dc2863b8f422dea79c5feba54259ded2d33f539fb1b9524a0509f2a"}, "7587aff4-be92-460c-8f4d-2d5b521a9273": {"doc_hash": "bf00351ca34ca83c2281e39bf592c8189a3e9e899fcc6082d4a46b6023ef7ce9"}, "bcb1bc5d-287f-4207-88e4-358733a5060b": {"doc_hash": "8a62836816c805b84ee4ecfca609f5bd6525ff2ff478b0ba06b5a5231ba80bfd"}, "7975c7ee-87f0-4869-a5dc-49693da350fd": {"doc_hash": "f4be78bbc3ee874b97c85ce6ab18c0249e109695e7b049d6a0437586e1def7ab"}, "c65632a5-0f62-456a-b595-b635e82b999b": {"doc_hash": "7cfc9e12efad3dd80c5aa97245e33a2284f8897f21f4a0ac0027bc75b67ba66f"}, "d3cc0d86-993b-4171-a7b9-dbfa880c9ad8": {"doc_hash": "08218551eb114357f4cf1a227ddf1d7ded821a4aab512782c41846f3dfdbbbe2"}, "0f4f4096-c632-4cd8-8b67-2d7d069644d0": {"doc_hash": "309008606172c1344e00883ab1dbacad0b1bf3765ffa4d843052fd06a8759fd3"}, "0dca7797-e1c0-4221-aa01-c357dabb6420": {"doc_hash": "a9d378288c0a729eb295b087eaa46cc5e895aa45ff433427133c48dd7a25286d"}, "54c5453f-b732-4667-9084-6485fba8288e": {"doc_hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b"}, "d000078c-a8bb-499f-b577-79fdfbfb8a36": {"doc_hash": "8376a8f11f49540490576e7226beb3f3a62711dcc25693010678dc3c6af22a39"}, "ceb6406c-5c0a-417f-8938-ff9420dd3019": {"doc_hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b"}, "a0c82c57-3de7-493e-99d3-a2d27c5a34d0": {"doc_hash": "30125ba10a95213603bd008f410aed859c7ae760991aae99df5614bec634050a", "ref_doc_id": "0c24da50-9093-4620-be33-74764265cfd9"}, "54a1b66a-e631-4dff-a37a-dd39bb2daaf5": {"doc_hash": "146886c1a18ac09097da6e719e6bfa4d07336de7b7581961de36eefe4f993ebb", "ref_doc_id": "88c91ea4-ae52-4660-a48f-d172367a596b"}, "f56f30ad-23f2-4d5c-89b4-e76003cf0431": {"doc_hash": "66f9823b92662136cb3a97850eb5ca6f0059b5edf66cd1f485bec51afc81ba0a", "ref_doc_id": "1e48d29b-0193-4de6-b864-3e6047cf11eb"}, "34adb75e-ba6d-4f9b-b4d3-18ca00df30b1": {"doc_hash": "863a9d8711149fa982c22e4aee6d9792537d07e02d8df03f293e3522b24e367f", "ref_doc_id": "dff73b6a-d0c1-4676-9afa-7eaabc4483ed"}, "6996fe6c-2d31-4ad7-8bc3-4dee833aea51": {"doc_hash": "1a64eda223122d264afbc4a5e67a42fc7ffaccfacdbfe8d85c3c307e3f94a7c1", "ref_doc_id": "dc42e523-2fe3-406d-983e-a6bae80067af"}, "c01b1e10-181c-4d09-9e65-7824bb265883": {"doc_hash": "f302b813698d6f3ba0ea768c372657bd64528478266345c16c30efc76f7a37f1", "ref_doc_id": "6191df8c-b33d-4146-98c1-33a538b91568"}, "ad34a3eb-275e-4cca-b7d4-072e23fdadbf": {"doc_hash": "777b5f411840024da6860a0e0bc10457c51e7daae878ba4a9a3bde82e3cd8ba6", "ref_doc_id": "aed56cc0-11b1-4701-a759-feff0d07baf4"}, "51a25c1b-cc9e-4be6-9d2f-ade7426d5848": {"doc_hash": "e3b6484a0ea4ddb6aa7d475156df5c3de72c2e7c0b6154e74532fb2a3626179c", "ref_doc_id": "9bac7d87-7580-4fc4-8528-00a106211bb6"}, "62812b10-43f9-4ff0-918a-5fefcbf53627": {"doc_hash": "64579516b11513dd14a9f36c306c365edf68fbbda9a116d03d2b4bc67aba6719", "ref_doc_id": "f5c22416-0b79-45b0-a643-e519197bff81"}, "412d80b8-3e49-4b18-b6f6-d61a9566c0fa": {"doc_hash": "e40a33223dc2863b8f422dea79c5feba54259ded2d33f539fb1b9524a0509f2a", "ref_doc_id": "9f66f562-b6ba-4a73-bcb3-d87169df4ec0"}, "6b7879e1-3a03-4f4b-9b0a-38a61a526da3": {"doc_hash": "bf00351ca34ca83c2281e39bf592c8189a3e9e899fcc6082d4a46b6023ef7ce9", "ref_doc_id": "7587aff4-be92-460c-8f4d-2d5b521a9273"}, "f05f9f6b-5918-444d-acc1-c21a571f30f2": {"doc_hash": "8a62836816c805b84ee4ecfca609f5bd6525ff2ff478b0ba06b5a5231ba80bfd", "ref_doc_id": "bcb1bc5d-287f-4207-88e4-358733a5060b"}, "4c5292b2-f365-48fd-a33b-47ecee9fae63": {"doc_hash": "f4be78bbc3ee874b97c85ce6ab18c0249e109695e7b049d6a0437586e1def7ab", "ref_doc_id": "7975c7ee-87f0-4869-a5dc-49693da350fd"}, "6d752588-6602-44e2-8b8f-3d3bfa6d829a": {"doc_hash": "7cfc9e12efad3dd80c5aa97245e33a2284f8897f21f4a0ac0027bc75b67ba66f", "ref_doc_id": "c65632a5-0f62-456a-b595-b635e82b999b"}, "e892e73e-2d27-4168-b24f-ae330af81a58": {"doc_hash": "08218551eb114357f4cf1a227ddf1d7ded821a4aab512782c41846f3dfdbbbe2", "ref_doc_id": "d3cc0d86-993b-4171-a7b9-dbfa880c9ad8"}, "2cb49640-e30a-4c8d-b5f0-2bb71904a905": {"doc_hash": "309008606172c1344e00883ab1dbacad0b1bf3765ffa4d843052fd06a8759fd3", "ref_doc_id": "0f4f4096-c632-4cd8-8b67-2d7d069644d0"}, "78e8b2fb-2f65-445c-9006-abc765ba1b37": {"doc_hash": "a9d378288c0a729eb295b087eaa46cc5e895aa45ff433427133c48dd7a25286d", "ref_doc_id": "0dca7797-e1c0-4221-aa01-c357dabb6420"}, "d9a2e5b6-4986-47cb-9c89-7000457febc7": {"doc_hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b", "ref_doc_id": "54c5453f-b732-4667-9084-6485fba8288e"}, "b3bf21a9-7283-4a11-a09c-c44c6659e247": {"doc_hash": "8376a8f11f49540490576e7226beb3f3a62711dcc25693010678dc3c6af22a39", "ref_doc_id": "d000078c-a8bb-499f-b577-79fdfbfb8a36"}, "61f07b15-6135-4611-b22c-2e152de815cf": {"doc_hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b", "ref_doc_id": "ceb6406c-5c0a-417f-8938-ff9420dd3019"}}, "docstore/data": {"a0c82c57-3de7-493e-99d3-a2d27c5a34d0": {"__data__": {"id_": "a0c82c57-3de7-493e-99d3-a2d27c5a34d0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0c24da50-9093-4620-be33-74764265cfd9", "node_type": null, "metadata": {}, "hash": "30125ba10a95213603bd008f410aed859c7ae760991aae99df5614bec634050a"}}, "hash": "30125ba10a95213603bd008f410aed859c7ae760991aae99df5614bec634050a", "text": "\ud83d\ude80 Unleash React.js State Management: A Definitive Guide to Mastering Complexity \ud83e\udde0<div><div>\n <p><strong>Introduction:</strong><br />\nIn the dynamic world of web development, React.js has emerged as a foundational technology. Yet, amid the innovation, one challenge remains constant: effectively managing the state of our applications. This guide is your compass, guiding you through the intricate realm of state management techniques within the React ecosystem. From fundamental concepts to advanced libraries, we embark on a journey fortified with practical code examples that deepen your understanding and equip you to conquer state management complexities.</p>\n<p><strong>Table of Contents:</strong></p>\n<ol>\n<li><strong>Understanding React Component State \ud83c\udf1f</strong></li>\n<li><strong>Tackling Prop Drilling with Context API \ud83c\udfaf</strong></li>\n<li><strong>Global State Made Easy: Introducing Redux \ud83c\udf10</strong></li>\n<li><strong>Effortless Data Fetching with React Query \ud83d\ude80</strong></li>\n<li><strong>Elevate Your State Management with MobX \ud83c\udf08</strong></li>\n<li><strong>Picking the Perfect Approach for Your Project \ud83d\udee0\ufe0f</strong></li>\n<li><strong>Crafting Clean and Maintainable State Management \ud83e\uddf9</strong></li>\n<li><strong>Glimpse into the Future: State Management Trends in React \ud83d\udd2e</strong></li>\n</ol>\n<p><strong>1. Understanding React Component State \ud83c\udf1f</strong></p>\n<p>At the heart of React's design is the concept of component state. Components have the remarkable ability to manage their own internal data, known as state. This enables dynamic updates and re-renders in response to changes. To illustrate, let's consider a simple counter component:<br />\n</p>\n<div>\n<pre><code>import React, { useState } from 'react';\nfunction Counter() {\n const [count, setCount] = useState(0);\n const increment = () =&gt; {\n setCount(count + 1);\n };\n return (\n &lt;div&gt;\n &lt;p&gt;Count: {count}&lt;/p&gt;\n &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n &lt;/div&gt;\n );\n}\nexport default Counter;\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>This example showcases the <code>useState</code> hook, which empowers us to declare and manipulate the <code>count</code> state variable. As the \"Increment\" button is clicked, the <code>increment</code> function modifies the state using <code>setCount</code>, leading to a re-render that reflects the updated count value.</p>\n<p><strong>2. Tackling Prop Drilling with Context API \ud83c\udfaf</strong></p>\n<p>As applications grow, passing data through deeply nested components can become unwieldy. The Context API provides an elegant solution to this problem, enabling data propagation without the convoluted threading of props. Consider this scenario:<br />\n</p>\n<div>\n<pre><code>import React, { createContext, useContext } from 'react';\nconst ThemeContext = createContext();\nfunction App() {\n return (\n &lt;ThemeContext.Provider value=\"light\"&gt;\n &lt;Toolbar /&gt;\n &lt;/ThemeContext.Provider&gt;\n );\n}\nfunction Toolbar() {\n const theme = useContext(ThemeContext);\n return &lt;div&gt;Current theme: {theme}&lt;/div&gt;;\n}\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>In this example, we establish a <code>ThemeContext</code> and utilize it to provide and consume the theme value across components, eliminating the need for explicit prop passing.</p>\n<p><strong>", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "54a1b66a-e631-4dff-a37a-dd39bb2daaf5": {"__data__": {"id_": "54a1b66a-e631-4dff-a37a-dd39bb2daaf5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "88c91ea4-ae52-4660-a48f-d172367a596b", "node_type": null, "metadata": {}, "hash": "146886c1a18ac09097da6e719e6bfa4d07336de7b7581961de36eefe4f993ebb"}}, "hash": "146886c1a18ac09097da6e719e6bfa4d07336de7b7581961de36eefe4f993ebb", "text": "React useState Hook in Action: What You Need to Know<div><div>\n <p>The React useState hook is one of the most popular hooks in React. This hook makes it easy to manage state within your function components. It is also very simple to use. In this tutorial you will learn what useState hook is and how to use it in your React applications.</p>\n<h2>\n <a href=\"#a-brief-introduction-to-react-hooks\">\n </a>\n A brief introduction to React hooks\n</h2>\n<p>React hooks are feature introduced in React 16.8. Under the hood, hooks are functions. These functions allow you to work with component state and lifecycle. Both these things were previously possible only with classes. The introduction of hooks changed this, and made functional components much more powerful.</p>\n<h2>\n <a href=\"#a-quick-introduction-to-react-usestate-hook\">\n </a>\n A quick introduction to React useState hook\n</h2>\n<p>One of these hooks that come with React is also the useState hook. This hook focuses on one specific thing. It allows you to add state to your function components. This means that you no longer have to work with class components. You also no longer have to convert function components to classes just so you can use state.</p>\n<h2>\n <a href=\"#getting-started-with-react-usestate\">\n </a>\n Getting started with React useState\n</h2>\n<p>The first step to use useState hook is to declare it in your function component. Well, after you import it in your file where you want to use it. When you declare it, useState will return an array with two values. The first value is the actual state. Value allows you to read the current state.</p>\n<p>The second value is a function. This function allows you to update the state, or its value. Since it returns an array, there are two ways to declare this hook. First, you can use array indices. Second, you can use <a href=\"https://blog.alexdevero.com/destructuring-assignment-javascript/#destructuring-arrays\">array destructuring</a>. The second approach is much more popular and you will see it very often.<br />\n</p>\n<div>\n<pre><code>// Create function component:\nfunction App() {\n // Declare useState hook with destructuring:\n // count: the current state (its value).\n // setCount: function that allows update the state.\n const [count, setCount] = useState()\n return (\n &lt;div&gt;\n {/* ... */}\n &lt;/div&gt;\n )\n}\n// Create function component:\nfunction App() {\n // Declare useState hook with array indices:\n const countArray = useState()\n const count = countArray[0] // The state.\n const setCount = countArray[1] // The update function.\n return (\n &lt;div&gt;\n {/* ... */}\n &lt;/div&gt;\n )\n}\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>You can use any name for the state and the update function you want. In other words, the \"count\" and \"setCount\" can be anything you want. The only rule to remember is that it must be <a href=\"https://blog.alexdevero.com/javascript-variables-introduction/#naming-variables\">valid variable name</a>. It is a good practice to start the name for the update function with \"set\". This is a preferred naming convention and you will see it very often.</p>\n<h2>\n <a href=\"#creating-state-with-initial-value\">\n </a>\n Creating state with initial value\n</h2>\n<p>The useState hook allows you set an initial value for every state you create. You can set this initial value by passing it as an argument to the useState hook when you declared it. This initial value can be any valid <a href=\"https://blog.alexdevero.com/javascript-basics-data-types-pt1/\">data type</a>", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f56f30ad-23f2-4d5c-89b4-e76003cf0431": {"__data__": {"id_": "f56f30ad-23f2-4d5c-89b4-e76003cf0431", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1e48d29b-0193-4de6-b864-3e6047cf11eb", "node_type": null, "metadata": {}, "hash": "66f9823b92662136cb3a97850eb5ca6f0059b5edf66cd1f485bec51afc81ba0a"}}, "hash": "66f9823b92662136cb3a97850eb5ca6f0059b5edf66cd1f485bec51afc81ba0a", "text": "React State for Beginners<div><div>\n <p>One of the most essential concepts that any modern JavaScript developer needs to understand is state.</p>\n<p>If you don't understand state, you're not going to be able to fully use and take advantage of powerful libraries such as React to build your applications.</p>\n<p>Let's see exactly what state is, how it already exists in your JavaScript applications now, and how React allows us to much more easily manage it with built-in hooks like <code>useState</code>.</p>\n<p><strong>What is state?</strong></p>\n<p>Something that may surprise you is that any website or application you build with plain JavaScript already involves state. It's just not obvious where it lives.</p>\n<p>Here is a basic example:</p>\n<p>Let's say that we're building a counter application with JavaScript. We want this application to be able to display the current count as well as increase and decrease the count by one.</p>\n<p>It will consist of just the current count as well as a button to increase the count by one and another to decrease the count by one.</p>\n<p>This is what the final version of our app will look like:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1xXoD_FX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7recumd7fbphfbillyin.gif\"></a><br />\nHere is the starting markup for our application:<br />\n</p>\n<div>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;head&gt;\n &lt;title&gt;Counter App&lt;/title&gt;\n &lt;meta charset=\"UTF-8\" /&gt;\n &lt;/head&gt;\n &lt;body&gt;\n &lt;div&gt;\n &lt;button&gt;+ 1&lt;/button&gt;\n &lt;span&gt;0&lt;/span&gt;\n &lt;button&gt;- 1&lt;/button&gt;\n &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>Simply put, <strong>state is data that we need to manage over time within our application</strong>.</p>\n<p>State is often changed through user input and that is the case within our application here.</p>\n<p>What is the state in our counter app? It is the count number.</p>\n<p>Our user can increase or decrease the state value by clicking on the appropriate button. What's important is that we want to display those changes to our user.</p>\n<p><strong>Problems with state in plain JavaScript</strong></p>\n<p>While state seems like a simple concept, there are two problems with managing it when you use plain JavaScript alone:</p>\n<p>1 It is not obvious what the state is or where it lives.</p>\n<p>2 Reading and updating the state is an unnatural and often <br />\n repetitive process when using native browser APIs like <br />\n document.<br />\nHow would we go about updating our count state when our user clicks on either button?</p>\n<p>We first need to get a reference to each element. To do this in plain JavaScript, it is common practice to add a unique <code>id</code> attribute to each element, select each element in JavaScript with the <code>document.querySelector</code> method, and store the reference in a local variable:<br />\n</p>\n<div>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;head&gt;\n &lt;title&gt;Counter App&lt;/title&gt;\n &lt;meta chars", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "34adb75e-ba6d-4f9b-b4d3-18ca00df30b1": {"__data__": {"id_": "34adb75e-ba6d-4f9b-b4d3-18ca00df30b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dff73b6a-d0c1-4676-9afa-7eaabc4483ed", "node_type": null, "metadata": {}, "hash": "863a9d8711149fa982c22e4aee6d9792537d07e02d8df03f293e3522b24e367f"}}, "hash": "863a9d8711149fa982c22e4aee6d9792537d07e02d8df03f293e3522b24e367f", "text": "Managing UI State in a React App<div><div>\n \n <main>\n <div>\n <article>\n <header>\n <div>\n <p><a href=\"/bipul\"></a>\n </p>\n <div>\n <p><a href=\"/bipul\">Bipul Sharma</a></p><p>\n Posted on <time>Jul 16, 2021</time>\n \u2022 Updated on <time>Mar 7, 2022</time>\n </p>\n </div>\n </div>\n </header>\n <div>\n <h2>\n <a href=\"#introduction\">\n </a>\n Introduction\n</h2>\n<p>UI State is the state that is only useful for controlling the interactive parts of our React app. The other state being Server-cache(State's stored on the server, and we store in the client for quick-access: like user data).</p>\n<p>useState is a Hook that lets you add React state to function components. </p>\n<h2>\n <a href=\"#lifting-state-up\">\n </a>\n Lifting State Up\n</h2>\n<p>If we have 2 sibling components that both need same state(or functions/methods), we need to lift that state to the least parent component and pass the data down to the components that need through props.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fTTMSY7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gd2il8izq2st2o2a0bxg.png\"></a></p>\n<h2>\n <a href=\"#prop-drilling\">\n </a>\n Prop Drilling\n</h2>\n<p>Now, if some component far away in the component tree needs the state, you need to lift the state all the way to the top and pass props to all intermediate components to get the data down to the component that actually needs it.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GhEV3Or---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1hkfnue25av28grsw8f.png\"></a></p>\n<p>This is what is called prop drilling- passing data from one part of the React Component tree to another by going through other parts that do not need the data but only help in passing it around.</p>\n<p>Lets take a simple example:<br />\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eFKveLFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rsgpn3djookplatz71e.png\"></a></p>\n<p>Here, UserPanel component and UserPanelContent component are intermediate components acting as tunnels to get the data down to the Welcome component that actually needs the data.</p>\n<h2>\n <a href=\"#using-composition-to-avoid-prop-drilling\">\n </a>\n Using Composition to avoid Prop Drilling\n</h2>\n<p>Instead of making components that render components and wiring props everywhere like this, you could compose things together through children props.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tEwgRBrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j89kp5b0j56cw5gkvukv.png\"></a></p>\n<p>Using children prop increases the ability to compose", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6996fe6c-2d31-4ad7-8bc3-4dee833aea51": {"__data__": {"id_": "6996fe6c-2d31-4ad7-8bc3-4dee833aea51", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dc42e523-2fe3-406d-983e-a6bae80067af", "node_type": null, "metadata": {}, "hash": "1a64eda223122d264afbc4a5e67a42fc7ffaccfacdbfe8d85c3c307e3f94a7c1"}}, "hash": "1a64eda223122d264afbc4a5e67a42fc7ffaccfacdbfe8d85c3c307e3f94a7c1", "text": "Demystifying state management<div><div>\n <p>\n </p>\n <div>\n <p><a href=\"/kevtiq\"></a>\n </p>\n \n </div>\n </div><div>\n <p>State management is one of the most complicated, and opinionated topics in modern and JavaScript-focused front-end development. But at its core, it is not that complicated. We just make it complicated. In this article I will try to demystify state and state management for you, and challenge your mental models around them. </p>\n<h2>\n <a href=\"#what-are-state-and-state-management\">\n </a>\n What are state and state management?\n</h2>\n<p>Is state some weird data storage? Is it the data from a database? No. State is nothing more than a JavaScript value that lives within in scope. It can be a boolean, a string, but is in most cases a (complex) object. But it remains a value. In most cases, it is even an object living on the same level as the <code>window</code> object. It has become a global value in the JavaScript environment, the browser window. From our code (e.g. UI components), we can use this value to determine what to show or what interactions to allow. In complex applications there are a few different types of state we can have. But remember, they are nothing more than values. </p>\n<ul>\n<li>\n<strong>Local</strong>: state that is used by a single UI component.</li>\n<li>\n<strong>Shared</strong>: state that is used by many UI components. It is often managed in a parent or wrapper component.</li>\n<li>\n<strong>Global</strong>: a special kind of <em>shared</em> state, as it lives on the highest level, accessible to all UI components (or even helper functions).</li>\n<li>\n<strong>Meta</strong>: also known as 'state about state'. It tells you something about</li>\n<li>\n<strong>Route</strong>: state stored in the current URL of the application (e.g. object IDs or pagination information).</li>\n<li>\n<strong>Remote</strong>: a copy of the data coming from a server. The responses of fetch requests are stored as 1-on-1 copies in this state. It should not deviate from the server (except when applying <a href=\"https://www.smashingmagazine.com/2016/11/true-lies-of-optimistic-user-interfaces/\">optimistic UI</a>).</li>\n</ul>\n<p>So what about state management? For many, state management feels like a black box. What is happening within Redux? Why does it feel so complicated. I look at it this way: state management is nothing more than patterns we use to make using and changing state, manageable. It is not black box magic, it is just patterns. Why not group all the mutations you can make on your state in one place? And how about giving these mutations simple, but understandable names? In complex applications, adopting these types of patterns makes our code more maintainable. Or so they say (it is true though). In the sections below, we go deeper into different kind of state management patterns. </p>\n<h2>\n <a href=\"#eventdriven-pattern\">\n </a>\n Event-driven pattern\n</h2>\n<p>The best-known pattern is the flux pattern. It gained popularity with the 'Redux' package. It is a great example of an event-driven pattern. Let's take a closer look at its flow. The user, via the view, dispatches an action, via an action creator. It might seem daunting or overly complex. But it is nothing more as I said before. It is a way to group all possible state mutations together, and allow us to use simple 'actions' with memorable names from our UI components. </p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png\"></a></", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c01b1e10-181c-4d09-9e65-7824bb265883": {"__data__": {"id_": "c01b1e10-181c-4d09-9e65-7824bb265883", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6191df8c-b33d-4146-98c1-33a538b91568", "node_type": null, "metadata": {}, "hash": "f302b813698d6f3ba0ea768c372657bd64528478266345c16c30efc76f7a37f1"}}, "hash": "f302b813698d6f3ba0ea768c372657bd64528478266345c16c30efc76f7a37f1", "text": "State Management with RxJS and React<div><div>\n <h3>\n <a href=\"#introduction\">\n </a>\n Introduction\n</h3>\n<p>Building big web apps can be tricky, especially when you have lots of different pieces of information to keep track of. But don't worry, RxJS is here to help! It's like a really cool tool that helps you manage all your data in one place.</p>\n<p>With RxJS, you can create these things called \"streams of data\" that different parts of your app can use. It's like a big river flowing through your app, keeping everything connected and in sync.</p>\n<p>In this article, we'll show you how to use RxJS to build web apps that are really easy to manage and work great. By the end of the article, you'll know how to use RxJS to manage all your data and build even bigger and better web apps!</p>\n<h3>\n <a href=\"#why-rxjs-for-state-management-\">\n </a>\n Why RxJS for State Management ?\n</h3>\n<p>Hey, do you ever get confused when you're building a big web app and you have lots of different pieces of information to keep track of? That's where RxJS comes in! It's like a really cool library that helps you manage all your data in one place.</p>\n<p>With RxJS, you can create streams of data that different parts of your app can use. It's kind of like a river flowing through your app, keeping everything connected and in sync.</p>\n<p>RxJS also helps you break down your app into smaller pieces, which is like having different rooms in your house for different stuff. That way, it's easier to keep everything organized and find what you need.</p>\n<p>Overall, RxJS is a great tool for managing data in big web apps. Whether you're building a simple app or a really big one, RxJS can help you keep everything under control!</p>\n<h3>\n <a href=\"#a-todo-list-example\">\n </a>\n A to-do list example\n</h3>\n<p>The easiest way to apply a new technology or a new proof of concept is to make a to-do list.</p>\n<p><strong>The Store:</strong><br />\n</p>\n<div>\n<pre><code>const subject = new Subject();\nconst initialState: Task[] = [];\nlet state = initialState;\nexport const todoStore = {\n init: () =&gt; {\n subject.next(state);\n },\n subscribe: (setState: any) =&gt; {\n subject.subscribe(setState);\n },\n addTask: (content: string) =&gt; {\n const task = {\n content,\n id: uid(),\n isDone: false,\n };\n state = [...state, task];\n subject.next(state);\n },\n removeTask: (id: string) =&gt; {\n const tasks = state.filter((task) =&gt; task.id !== id);\n state = tasks;\n subject.next(state);\n },\n completeTask: (id: string) =&gt; {\n const tasks = state.map((task) =&gt; {\n if (task.id === id) {\n task.isDone = !task.isDone;\n }\n return task;\n });\n state = tasks;\n subject.next(state);\n },\n initialState,\n};\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>This code defines a simple store for managing a to-do list using RxJS. The store is implemented using a <code>Subject</code> and provides methods for adding, removing, and completing tasks.</p>\n<p>The <code>init</code> function initializes the store by publishing the current state to the subject using <code>subject.next(state)</code>. This function is typically called when the app is first loaded to ensure that the store is up to date.</p>\n<p>The <code>subscribe</code> function allows components to subscribe to changes in the store. When the store is updated, the <code>setState</code> function passed to <code>", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad34a3eb-275e-4cca-b7d4-072e23fdadbf": {"__data__": {"id_": "ad34a3eb-275e-4cca-b7d4-072e23fdadbf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aed56cc0-11b1-4701-a759-feff0d07baf4", "node_type": null, "metadata": {}, "hash": "777b5f411840024da6860a0e0bc10457c51e7daae878ba4a9a3bde82e3cd8ba6"}}, "hash": "777b5f411840024da6860a0e0bc10457c51e7daae878ba4a9a3bde82e3cd8ba6", "text": "Complex State Management<div><article>\n <header>\n <p>\n </p>\n \n </header>\n <div>\n <h2>\n <a href=\"#so-what-complicates-state-management\">\n </a>\n <strong>So what complicates state management?</strong>\n</h2>\n<p>Nested objects created by model associations in your backend of course \ud83e\udd13! </p>\n<p>It's been several weeks since I started building applications with React, and this last one got a little complicated. My latest project was constructed with a React frontend and a Ruby on Rails backend. Setting up the associations of the 3 models for the project wasn't too bad, but utilizing that information in the frontend proved to be quite a bit more challenging. I found myself in a constant sea of red error messages every time I submitted a form. Well, it turned out I really needed to backtrack and reinforce my understanding of basic state management before I could manage more complex updates. </p>\n<p>If your models are associated as have_many_through to support a many-to-many relationship, things can get a little quirky. Let's start with a seemingly simple example. So, we have a book club app. It has 3 models: user, book, and comment. The relationships are as follows:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Yu2UMzDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cigkyq0dsdpyi5dm9ofr.png\"></a></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--LfSOfzF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzn7ak8gxbmvg2pi79cm.png\"></a></p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qe56YQnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9igvy9oi10a8355ymj9i.png\"></a></p>\n<p>For this project, I used the useContext hook for the first time and it was wonderful! Passing props for a project this large would have driven me crazy. Happy I can add this skill to my newbie developer arsenal. So, here is my context for managing my books. I only wanted the user to have the ability to create new books so it's simple, but the context of the comments gets a bit more intricate.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6HNWiat7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bnv3ut12v2msoadd1xv.png\"></a></p>\n<p>The handleAddNewBook function is relatively straightforward. I use the spread operator on the books array to gain access, and then I insert my new book. Super simple. Now...because each user has their own books array created by the backend associations, I also need to update the user state. This is where my brain started malfunctioning so to speak. How do I accomplish such a thing? Those synapses were firing, but they sure weren't connecting until my instructor broke down what I needed to do. </p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IJBXglK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "51a25c1b-cc9e-4be6-9d2f-ade7426d5848": {"__data__": {"id_": "51a25c1b-cc9e-4be6-9d2f-ade7426d5848", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9bac7d87-7580-4fc4-8528-00a106211bb6", "node_type": null, "metadata": {}, "hash": "8720997eec913756ccb1d0d387a28516ce3396d2eac9ac014c373dbf82c7e1bf"}}, "hash": "e3b6484a0ea4ddb6aa7d475156df5c3de72c2e7c0b6154e74532fb2a3626179c", "text": "State Management in React.js: How useState Makes Your Life Easier \ud83c\udf89<div><div>\n <p>Hello, fellow React enthusiasts! Are you tired of dealing with the clunky state management in class components? Do you crave the simplicity and elegance of functional components? Well, buckle up, because today we're diving into the magical world of <strong>useState</strong>. You're about to find out how this little React Hook is going to change the way you manage state <em>forever</em>!</p>\n<p><a href=\"https://i.giphy.com/media/07kvmsfQYdzeUMHhCU/giphy.gif\"></a></p>\n<p><em>Prerequisites: A basic understanding of React, its components, and some familiarity with ES6 JavaScript.</em></p>\n<h2>\n <a href=\"#1-react-state-basics\">\n </a>\n <strong>1. React State Basics \ud83c\udfc1</strong>\n</h2>\n<p>Before we dive into useState, let's do a quick recap of state in React:</p>\n<ul>\n<li>\n<strong>State</strong>: The internal data storage for your components. It's like the memory bank of your component's brain \ud83e\udde0.</li>\n<li>\n<strong>Class components</strong>: State management with <strong><code>this.state</code></strong> and <strong><code>this.setState()</code></strong>. A bit clunky and old-school, but it gets the job done.</li>\n<li>\n<strong>Functional components</strong>: Before Hooks, these bad boys didn't have built-in state management. But who needs state when you're just a pure function, right? \ud83d\ude07</li>\n</ul>\n<h2>\n <a href=\"#2-introduction-to-react-hooks\">\n </a>\n <strong>2. Introduction to React Hooks \ud83c\udfa3</strong>\n</h2>\n<p>Enter the world of Hooks! These game-changers were introduced in React 16.8 and brought state management to functional components. Now, you can have your cake and eat it too! \ud83c\udf70</p>\n<p>Hooks follow some rules, though:</p>\n<ol>\n<li>Only call Hooks at the top level.</li>\n<li>Only call Hooks from React functions.</li>\n</ol>\n<p>Now that we've laid the groundwork, let's talk about our star of the show: <strong>useState</strong>.</p>\n<p><a href=\"https://i.giphy.com/media/3o6MbdqPYz7e6NROr6/giphy.gif\"></a></p>\n<h2>\n <a href=\"#3-understanding-the-usestate-hook\">\n </a>\n <strong>3. Understanding the useState Hook \ud83e\udde9</strong>\n</h2>\n<p>Using useState is like switching from a flip phone to a smartphone. It's sleek, modern, and oh-so-easy to use. Check out the syntax:<br />\n</p>\n<div>\n<pre><code>\nconst [state, setState] = useState(initialState);\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>It's like magic! \u2728 You get the current state and a function to update it, all in one line of code. Plus, useState works with objects and arrays, too!</p>\n<h2>\n <a href=\"#4-practical-examples-of-usestate\">\n </a>\n <strong>4. Practical Examples of useState \ud83d\udee0\ufe0f</strong>\n</h2>\n<p>Enough theory, let's see useState in action!</p>\n<h3>\n <a href=\"#41-counter-app\">\n </a>\n <strong>4.1 Counter App \ud83e\uddee</strong>\n</h3>\n<div>\n<pre><code>\nimport React, { useState } from 'react';", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "62812b10-43f9-4ff0-918a-5fefcbf53627": {"__data__": {"id_": "62812b10-43f9-4ff0-918a-5fefcbf53627", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f5c22416-0b79-45b0-a643-e519197bff81", "node_type": null, "metadata": {}, "hash": "64579516b11513dd14a9f36c306c365edf68fbbda9a116d03d2b4bc67aba6719"}}, "hash": "64579516b11513dd14a9f36c306c365edf68fbbda9a116d03d2b4bc67aba6719", "text": "Understanding State Management Solutions<div><div>\n <p>\n </p>\n \n </div><div>\n <blockquote>\n<p>As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. A redundant or duplicate state is a common source of bugs.</p>\n</blockquote>\n<p>When it comes to thinking about State Management solutions, the first example that comes to mind is User authentication and authorization. Choosing a set of technologies to solve this is not an easy task and could even change from case to case subject to your business needs. You need to ask yourself how will these technologies make it easier to:</p>\n<ul>\n<li>Navigate your Users through authentication</li>\n<li>Manage UI changes as Users' state changes</li>\n<li>Share state between components (regardless if you'll prop drilling or not)</li>\n<li>Create performant applications at scale</li>\n</ul>\n<p>To understand the problems that a good state management solution solves, this article provides an example based on the following technologies:</p>\n<ul>\n<li>\n<strong>Supabase Authentication &amp;&amp; Database</strong>: authentication with Row Level Security synced with a full Postgres database and OOTB (out of the box) APIs to interact with your Supabase instance.</li>\n<li>\n<strong>TanStack Query v4</strong> <em>(hereafter referred to as React Query)</em>: declarative asynchronous state management solution for modern applications. </li>\n</ul>\n<h2>\n <a href=\"#before-anything-react-query-is-not-a-data-fetching-library\">\n </a>\n Before anything, React Query is NOT a data fetching library\n</h2>\n<p>Let's touch base on a common misconception: React Query is NOT a data fetching library. Even if it <em>does</em> simplify data fetching in React applications, it does not fetch any data at all on its own. Whenever you introduce React Query in your application, you'll quickly realize that you need an actual data fetching library to get the data before anything happens, such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a>, <a href=\"https://axios-http.com/\">Axios</a>, etc. More on this can be found on Dominik's <a href=\"https://tkdodo.eu/blog/react-query-as-a-state-manager\">React Query as a State Manager</a>.</p>\n<h2>\n <a href=\"#storing-user-data\">\n </a>\n Storing User Data\n</h2>\n<p>Creating a Supabase instance (or project) is as easy as <a href=\"https://app.supabase.com/\">signing up</a> and following the steps until you reach your instance's dashboard. Once there, here are a couple of things you'll want to configure in <strong>Authentication &gt; Configuration &gt; Settings</strong>:</p>\n<ul>\n<li>User Signups: enabled (for Guest authentication)</li>\n<li>Redirect URLs: the base domain for both your development and production URLs</li>\n<li>Auth Providers: Email (for Guest authentication) &amp;&amp; GitHub</li>\n</ul>\n<h3>\n <a href=\"#guest-authentication\">\n </a>\n Guest Authentication\n</h3>\n<p>In some cases, you might want to reduce the friction between your Users and your application resources by enabling <em>Guest Authentication</em>. </p>\n<p>Ask your user for an identifier key value (their name would be just fine), and append a default email address and password. Disclaimer: for this to be an acceptable or safe solution, you will want to restrict full access to your application with anything other than an email/password combination such as a Social Provider (like GitHub), otherwise, adjustments would have to be considered.<br />\n</p>\n<div>\n<pre><code>const signInGuest = async () =&gt; {\n const { user, session, error } = await supabase.auth.signUp({\n email: `${name}-${nanoid(10", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "412d80b8-3e49-4b18-b6f6-d61a9566c0fa": {"__data__": {"id_": "412d80b8-3e49-4b18-b6f6-d61a9566c0fa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9f66f562-b6ba-4a73-bcb3-d87169df4ec0", "node_type": null, "metadata": {}, "hash": "e40a33223dc2863b8f422dea79c5feba54259ded2d33f539fb1b9524a0509f2a"}}, "hash": "e40a33223dc2863b8f422dea79c5feba54259ded2d33f539fb1b9524a0509f2a", "text": "How to manage state in a React app using Redux.<div><div>\n <p>In this tutorial, you will manage the state of a React app using Redux. Redux helps you track and manage the state of an entire application in a single object instead of having the state and logic in a top-level component.</p>\n<p>You will build a to-do app that centralizes the state and logic using Redux.</p>\n<p>By the end of the tutorials you will know:</p>\n<ul>\n<li><p>What Redux is and the benefit of using Redux for state management.</p></li>\n<li><p>Understand and use Redux concepts such as the store, reducer, actions, etc. in a Todo app.</p></li>\n</ul>\n<p>The tutorial will be in two sections. The first section explains key concepts, the Redux architecture, and the basic usage of Redux. In the next section, we will build a Todo app using Redux for state management.</p>\n<h2>\n <a href=\"#prerequisite\">\n </a>\n Prerequisite\n</h2>\n<p>To get the most out of this tutorial you should be familiar with:</p>\n<ul>\n<li><p>Functions in JavaScript</p></li>\n<li><p>Knowledge of React terminology: State, JSX, Components, Props, and Hooks</p></li>\n<li><p>Building a basic React app</p></li>\n</ul>\n<h2>\n <a href=\"#introduction-to-state-management\">\n </a>\n Introduction to State Management\n</h2>\n<p>React enables developers to build complex user interfaces easily. To add interactivity to the UI, React components need access to data. The data can be a response from an API endpoint or defined within the app. This data will be updated in response to an interaction, such as when a user clicks on a button, or types into an input field.</p>\n<p>Inside a React component, the data is stored in an <code>object</code> called <code>state</code>. Whenever <code>state</code> changes, the component will re-render, and React will update the screen to display the new data as part of the UI.</p>\n<p>In a React app, multiple components may need access to the state. Hence, it needs to be effectively managed. <strong>Effective state management entails being able to store and update data in an application.</strong></p>\n<h2>\n <a href=\"#what-is-redux\">\n </a>\n What is Redux?\n</h2>\n<blockquote>\n<p><strong>Redux is a pattern and library for managing and updating application state, using events called \"actions\".</strong> It serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.</p>\n</blockquote>\n<p>With Redux, you have a central store to keep, update, and monitor the state of your application. That means, our components may not have states. The state will be in a central location and can be accessed by multiple components in your application.</p>\n<h2>\n <a href=\"#what-problem-does-redux-solve\">\n </a>\n What problem does Redux solve?\n</h2>\n<p>A basic React app can be segmented into the following:</p>\n<ul>\n<li><p><strong>State</strong>: The current condition of the app</p></li>\n<li><p><strong>View</strong>: The UI of the app</p></li>\n<li><p><strong>Actions</strong>: A function that updates the state when an event occurs in your app (generally referred to as Event handlers).</p></li>\n</ul>\n<p>Every component in an app can have a state. However, it becomes a challenge if multiple components need access to the same data. To solve this issue, we \"lift the state up\". Lifting state up is a process where you move the state from a child component to its parent (top-level) component. With this approach, you can easily share state between multiple child components.</p>\n<p><a href=\"https://res.cloudinary.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6b7879e1-3a03-4f4b-9b0a-38a61a526da3": {"__data__": {"id_": "6b7879e1-3a03-4f4b-9b0a-38a61a526da3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7587aff4-be92-460c-8f4d-2d5b521a9273", "node_type": null, "metadata": {}, "hash": "bf00351ca34ca83c2281e39bf592c8189a3e9e899fcc6082d4a46b6023ef7ce9"}}, "hash": "bf00351ca34ca83c2281e39bf592c8189a3e9e899fcc6082d4a46b6023ef7ce9", "text": "Manage your state with the useState hook in React<div><div>\n \n <main>\n <div>\n <article>\n <header>\n <p>\n </p>\n <div>\n <p><a href=\"/fabienschlegel\"></a>\n </p>\n \n </div>\n </header>\n <div>\n <p>React introduces hooks in version 16.8. Hooks allow us to create functional components with states and side effects.</p>\n<p>The <code>useState</code> is the simplest hook we can encounter in a React project. This method takes one parameter, the initial value of the state and returns two properties, the value itself and a method to update it.</p>\n<h2>\n <a href=\"#rules-of-hooks\">\n </a>\n Rules of hooks\n</h2>\n<p>Like other hooks, there are only two rules to use them. Always use it at the top level of the function, never in loops, conditions and nested functions. You can only use hooks in React functions, never in javascript functions.</p>\n<h2>\n <a href=\"#basic-usage-of-usestate\">\n </a>\n Basic usage of useState\n</h2>\n<div>\n<pre><code>import { useState } from 'react';\nfunction App() {\n const [count, setCount] = useState(0);\n const handleIncrease = () =&gt; setCount(count + 1);\n return (\n &lt;div&gt;\n &lt;p&gt;Increase the count to {count + 1}&lt;/p&gt;\n &lt;button onClick={handleIncrease} type=\"button\"&gt;\n Add\n &lt;/button&gt;\n &lt;/div&gt;\n );\n}\nexport default App;\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>In the code snippet above, you can see a basic <code>useState</code> implementation. The count variable is initially set to 0 with the parameter of the hook. I name the variable <code>count</code> and the setter <code>setCount</code>. It\u2019s a convention to begin the setter with set and use the variable name after. But it\u2019s not mandatory, do what you want.</p>\n<p>I use <code>setCount</code> in the function <code>handleIncrease</code>. Each time the button is clicked, the variable count is updated and React rerenders the component.</p>\n<h2>\n <a href=\"#more-advanced-use-cases\">\n </a>\n More advanced use cases\n</h2>\n<h3>\n <a href=\"#asynchronous-state-changes\">\n </a>\n Asynchronous state changes\n</h3>\n<p>Often, our components are more complex and we have several states in the same component. We can update them separately or together.</p>\n<p>Take our previous example and add some improvements.<br />\n</p>\n<div>\n<pre><code>import { useState } from 'react';\nfunction App() {\n const [counters, setCount] = useState({ fizz: 0, buzz: 0 });\n const handleIncreaseFizz = () =&gt;\n setCount((prevCounters) =&gt; ({ ...prevCounters, fizz: prevCounters.fizz + 1 }));\n const handleIncreaseBuzz = () =&gt;\n setCount((prevCounters) =&gt; ({ ...prevCounters, buzz: prevCounters.buzz + 1 }));\n const handleIncreaseAll = () =&gt;\n setCount((prevCounters) =&gt; ({fizz: prevCounters.fizz + 1, buzz: prevCounters.buzz + 1}));\n return (\n &lt;div&gt;\n &lt;p&gt;Fizz: {counters.fizz} Buzz: {counters.buzz}&lt;/p&gt;\n &lt;button onClick={handleIncreaseFizz} type=\"button\"&gt;Increase Fizz&lt;/button&gt;\n &", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f05f9f6b-5918-444d-acc1-c21a571f30f2": {"__data__": {"id_": "f05f9f6b-5918-444d-acc1-c21a571f30f2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bcb1bc5d-287f-4207-88e4-358733a5060b", "node_type": null, "metadata": {}, "hash": "8a62836816c805b84ee4ecfca609f5bd6525ff2ff478b0ba06b5a5231ba80bfd"}}, "hash": "8a62836816c805b84ee4ecfca609f5bd6525ff2ff478b0ba06b5a5231ba80bfd", "text": "Bad Habits of Mid-Level React Developers<div><div>\n <p><a href=\"/srmagura\"></a>\n </p>\n <div>\n <p><a href=\"/srmagura\">Sam Magura</a></p><p>\n Posted on <time>Apr 9, 2022</time>\n \u2022 Updated on <time>Apr 15, 2022</time>\n </p>\n </div>\n </div><div>\n <p>If you're a mid-level React developer looking to become an advanced React developer, this post is for you!</p>\n<p>I've been reviewing React code written by junior and mid-level developers on a daily basis for a couple of years now, and this post covers the most common mistakes I see. I'll be assuming you already know the basics of React and therefore won't be covering pitfalls like \"don't mutate props or state\". </p>\n<h2>\n <a href=\"#bad-habits\">\n </a>\n Bad Habits\n</h2>\n<p><strong>Each heading in this section is a bad habit that you should avoid!</strong></p>\n<p>I'll be using the classical example of a to-do list application to illustrate some of my points.</p>\n<h3>\n <a href=\"#duplicating-state\">\n </a>\n Duplicating state\n</h3>\n<p><strong>There should be a single source of truth for each piece of state.</strong> If the same piece of information is stored in state twice, the two pieces of state can get out of sync. You can try writing code that synchronizes the two pieces of state, but this is an error prone band-aid rather than a solution.</p>\n<p>Here's an example of duplicate state in the context of our to-do list app. We need to track the items on the to-do list as well as which ones have been checked off. You could store two arrays in state, with one array containing all of the to-dos and the other containing only the completed ones:<br />\n</p>\n<div>\n<pre><code>const [todos, setTodos] = useState&lt;Todo[]&gt;([])\nconst [completedTodos, setCompletedTodos] = useState&lt;Todo[]&gt;([])\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>But this code is buggy at worst and smelly at best! Completed to-dos are stored in the state twice, so if the user edits the text content of a to-do and you only call <code>setTodos</code>, <code>completedTodos</code> now contains the old text which is incorrect!</p>\n<p>There are a few ways to deduplicate your state. In this contrived example, you can simply add a <code>completed</code> boolean to the <code>Todo</code> type so that the <code>completedTodos</code> array is no longer necessary.</p>\n<h3>\n <a href=\"#underutilizing-reducers\">\n </a>\n Underutilizing reducers\n</h3>\n<p>React has two built-in ways to store state: <code>useState</code> and <code>useReducer</code>. There are also countless libraries for managing global state, with Redux being the most popular. Since Redux handles all state updates through reducers, I'll be using the term \"reducer\" to refer to both <code>useReducer</code> reducers and Redux reducers.</p>\n<p><code>useState</code> is perfectly fine when state updates are simple. For example, you can <code>useState</code> to track whether a checkbox is checked, or to track the <code>value</code> of a text input. </p>\n<p>That being said, <strong>when state updates become even slightly complex, you should be using a reducer.</strong> In particular, <strong>you should be using a reducer any time you are storing an array in state and the user can edit each item in the array.</strong> In the context of our to-do list app, you should definitely manage the array of to-", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c5292b2-f365-48fd-a33b-47ecee9fae63": {"__data__": {"id_": "4c5292b2-f365-48fd-a33b-47ecee9fae63", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7975c7ee-87f0-4869-a5dc-49693da350fd", "node_type": null, "metadata": {}, "hash": "f4be78bbc3ee874b97c85ce6ab18c0249e109695e7b049d6a0437586e1def7ab"}}, "hash": "f4be78bbc3ee874b97c85ce6ab18c0249e109695e7b049d6a0437586e1def7ab", "text": "Share state using custom hooks<div><div>\n <p>Many articles have been written about React state management strategies for React, and yes, this is yet another one of them. But rather than talking about a new library and how everyone should adopt it, I want to talk about two different philosophical approach to state: centralised vs decentralised.</p>\n<h2>\n <a href=\"#the-decentralised-state-paradigm\">\n </a>\n The decentralised state paradigm\n</h2>\n<p>Decentralised state has been the battery-included solution since the first version of React. Class components can edit local state to trigger a re-render, and functional components can accomplish the same with the <code>useState</code> hook. </p>\n<p>Local state is very intuitive to manipulate because it sits near the component that uses it for display and side effects, it's allocated when needed, and disappears when the component is unmounted.</p>\n<h2>\n <a href=\"#the-centralised-state-paradigm\">\n </a>\n The centralised state paradigm\n</h2>\n<p>Keeping all mutable state in one place is an approach championed by Elm, ClojureScript and Redux: a single data structure (usually a tree) contains all the state needed to render your React application. When a branch of that tree changes state, the relevant components in your React hierarchy re-render displaying the new information.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CO4u-rov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh6fvhqttth686rqcml8.png\"></a></p>\n<p>A single point of reference for the entire app state is a very neat idea and feels like a natural evolution on top of React itself: React abstracts DOM changes with components, the app state abstracts component changes with a big JSON value.</p>\n<p>Since all changes are represented with data, the logic that transitions the app through different states is very easy to express and to test: it's just a function <code>f(currentState, event) =&gt; newState</code>. It's also easy to generate many valid UI screens by mocking the app state.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--n4Pi9Qwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpnb4kvtblrwjkhsw9u7.png\"></a><br />\n<em><a href=\"https://github.com/frankiesardo/speccards\">speccards</a> generates random valid UI states based on a spec</em></p>\n<h2>\n <a href=\"#problems-with-decentralised-state\">\n </a>\n Problems with decentralised state\n</h2>\n<p>Local state becomes problematic when two components need to watch and act on the same state. Think about a simple currency converter where the user can edit either currency text input.</p>\n<p>In this case the naive solution is to \"lift the state up\" to the closest parent and give all children callback functions to manipulate the state. </p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--avzR7JC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc4r26cibamtwqw1982l.png\"></a><br />\n <em><a href=\"https://reactjs.org/docs/lifting-state-up.html\">Lifting State Up</a> in vanilla React</em></p>\n<p>This rarely scales for bigger applications, so something like <a href=\"https://recoiljs.org/\">Recoil</a> might", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6d752588-6602-44e2-8b8f-3d3bfa6d829a": {"__data__": {"id_": "6d752588-6602-44e2-8b8f-3d3bfa6d829a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c65632a5-0f62-456a-b595-b635e82b999b", "node_type": null, "metadata": {}, "hash": "7cfc9e12efad3dd80c5aa97245e33a2284f8897f21f4a0ac0027bc75b67ba66f"}}, "hash": "7cfc9e12efad3dd80c5aa97245e33a2284f8897f21f4a0ac0027bc75b67ba66f", "text": "React Context API - an Implementation Quick Guide<div><div>\n <p><a href=\"/loopdeluce\"></a>\n </p>\n <div>\n <p><a href=\"/loopdeluce\">Lucy Bullen</a></p><p>\n Posted on <time>Jun 22, 2022</time>\n \u2022 Updated on <time>Jun 26, 2022</time>\n </p>\n </div>\n </div><div>\n <p>Implementing the React Context API is one way to implement <strong>global state</strong> in an application. </p>\n<p><strong>Global state</strong> is useful when there are child components that need access to the same piece of state nested in disjointed areas of the component tree. Examples of this include: the toggling of a dark mode layout and accessing user information for personalized application formatting. </p>\n<p>The local state management methodology calls for this to be solved using <strong>prop drilling</strong> - defining state at a shared higher level component and passing the variable down to child components, and child components' child components, using props. With a complex component tree, it can be clunky to pass the state variable as props and inefficient to re-render the entire shared higher level component each time a child component updates state. Enter React Context API for global state management. It allows children components to have access to state variables and state variables' relevant functions without explicitly passing them through the component tree by making them 'global.'</p>\n<p><em>Other global statement management solutions are out of the scope of this article, but learn more about other popular options here: <a href=\"https://javascript.works-hub.com/learn/state-management-battle-in-react-hooks-redux-and-recoil-9977a\">State Management Battle in React 2022: Hooks, Redux, and Recoil</a></em></p>\n<p>The syntax required for the React Context API global state management consists of: </p>\n<ul>\n<li>the createContext object</li>\n<li>the context provider component</li>\n<li>the useContext hook</li>\n</ul>\n<h2>\n <a href=\"#the-createcontext-object\">\n </a>\n the createContext object\n</h2>\n<p>The createContext object initializes the use of context in a React application.</p>\n<p>To create the createContext object, import React and set a constant equal to React.createContext().<br />\n</p>\n<div>\n<pre><code>import React from 'react';\nconst GlobalContext = React.createContext();\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<h2>\n <a href=\"#the-context-provider-component\">\n </a>\n the context provider component\n</h2>\n<p>The context provider component is how global state, and its' relevant functions, are <em>provided</em> to other components in a React application.</p>\n<p>In the same file as the createContext object, create a context provider component. Assuming function component syntax; the function should take in the component's children as props and return JSX with a parent component encompassing the children props. Set the name of the parent component equal to the createContext object with .Provider added to the end and pass it a value prop. The value prop will hold the global state relevant data being passed to the children components.</p>\n<p>Export the createContext object and the context provider component for use in other areas of the application.<br />\n</p>\n<div>\n<pre><code>import React, {useState} from 'react';\nconst GlobalContext = React.createContext();\nfunction GlobalProvider({ children }) {\n const [global, setGlobal] = useState(false);\n return (\n &lt;GlobalContext.Provider value={global}&gt;\n {children}\n &lt;/GlobalContext.Provider&gt;\n );\n};\nexport default GlobalProvider;\nexport { GlobalContext };\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>To make the global state data available to other components in the application,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e892e73e-2d27-4168-b24f-ae330af81a58": {"__data__": {"id_": "e892e73e-2d27-4168-b24f-ae330af81a58", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3cc0d86-993b-4171-a7b9-dbfa880c9ad8", "node_type": null, "metadata": {}, "hash": "08218551eb114357f4cf1a227ddf1d7ded821a4aab512782c41846f3dfdbbbe2"}}, "hash": "08218551eb114357f4cf1a227ddf1d7ded821a4aab512782c41846f3dfdbbbe2", "text": "React \u2014 5 Things That Might Surprise You<div><div><p>The React library is pretty straightforward and is relatively easy to get into, especially with the wide variety of materials that exist to help you learn it. But every tool has its share of tricks or issues that these tutorials usually don\u2019t cover. You get to learn them when someone reviews your code, or worse \u2014 when you\u2019re facing a problem and are desperate to find a solution. Hopefully, with this article, I might reveal some of these things about React, and maybe even surprise you!</p><figure></figure><h2>1. Setting the state by using the previous state is unpredictable.</h2><p>State management is the foundation of React, and while <code>useState</code>is probably the most common hook, there might be some unawareness of its actual behavior.</p><p>Let\u2019s have a look at the following component:</p><figure></figure><p>What would you expect the value of the counter state to be, after a user clicks on the button?</p><p>A. 2<br />B. 1</p><p>Not sure? Try it out yourself:</p><figure><figcaption>Is it 2? Or maybe 1? What did you get?</figcaption></figure><p>Well, whether you knew that, guessed correctly. or just tested the demo \u2014 the answer is B!</p><p>The reason is that during our state update we used the previous state value: <code>setCounter(count + 1)</code>. Essentially, the state setter function is wrapped inside the functional component closure, so it is provided with the value that was captured in that closure. It means that when it will eventually be executed (the state setter function is asynchronous), it might hold a state value that is no longer relevant. On top of that, consecutive execution of setState might cause React\u2019s scheduling algorithms to handle multiple very fast state updates using the same event handler.</p><p>The same problem might also occur when setting the state inside an asynchronous function:</p><pre>onClick={() =&gt; { <br /> setTimout(() =&gt; { setCounter(counter + 1); ), 1000);<br />}};</pre><p>But, no worries, React actually provides an easy solution to this problem \u2014 \u201c<strong>functional updates</strong>\u201d.</p><pre>setCounter((prevCounter) =&gt; prevCounter + 1);</pre><p>Instead of passing the value directly to <code>setCounter</code>, we pass a function. This function receives as a parameter the <strong>previous state.<br /></strong>This way we can be sure that React provides us the correct value of the previous state, and avoid the scenarios that might cause the unexpected behavior.</p><figure></figure><p><strong>Whenever your state update is relying on the previous state, be sure to use functional updates!</strong></p><p>Another benefit of this is to allow correct memoization of functions, since passing the value as a dependency would re-create the function on every state change.</p><figure></figure><h2>2. You can use useRef to store a static variable</h2><p>We are accustomed to using the ref mechanism in React as a means to access an element\u2019s DOM node, whether because we need it to calculate its size, set a focus status, or basically do anything React can\u2019t do naturally. But refs can also be used for a different purpose \u2014 something that we could achieve for free with class components, but we can\u2019t with functional ones \u2014 keep a static variable that won\u2019t be recreated on every render.</p><p>Why would we need to do so? Well, it really depends on the situation. For instance, let\u2019s say we\u2019re using some javascript library that was not written for React.</p><figure><figcaption>Using a ref saves the day!</figcaption></figure><p>In this example, we have a class Dog. Dog has two functions \u2014 one to set its name, and one to bark it.</p><p>If we tried to create the instance of this class using a simple variable, what would happen is that in case (for any reason) the component is re-rendered, a new instance will be created. So any changes we did so far will go away.</p><p>But by using a ref, we will be able to keep our instance", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2cb49640-e30a-4c8d-b5f0-2bb71904a905": {"__data__": {"id_": "2cb49640-e30a-4c8d-b5f0-2bb71904a905", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0f4f4096-c632-4cd8-8b67-2d7d069644d0", "node_type": null, "metadata": {}, "hash": "309008606172c1344e00883ab1dbacad0b1bf3765ffa4d843052fd06a8759fd3"}}, "hash": "309008606172c1344e00883ab1dbacad0b1bf3765ffa4d843052fd06a8759fd3", "text": "What I Have Learned Using React Hooks<div><div><p>React is one of the most popular JavaScript framework (library) along with Angular and Vue, but hands down React is the easiest and beginner friendly when it comes to learning and getting used to it. (React is a much small library comparing to Angular). When I first started learning React, one of the biggest issue for me was to manage the state. Here is when React Hooks comes in, because it can greatly reduces the amount of pain when it comes to state management in React. Today we will take a look at how to manage state with React Hooks (useState).</p><figure></figure><p>There are so many tools provided by React Hooks, but we want to go over the essential ones and the most important tool (in my opinion) is the useState feature. First thing first, in order for us to begin using React Hooks, we need to understand that it can only be used in a functional component, not class component (shown in above code snippet). Another rule to simply follow is that react hooks is we cannot call hooks inside loops, conditions and nested functions (details <a href=\"https://reactjs.org/docs/hooks-rules.html\">rules </a>will be linked here for your viewings). React will give us errors when we try to use hooks within loops, conditions or nested functions.</p><figure></figure><p>Now Let us take a look at a simple example uses of React Hooks useState feature. From above code snippet, we can tell right the way, the first line is to de-structure useState from React, this way we simply don\u2019t have to write <code>React.useState()</code>every time we want this feature. In this example, we have noticed that it is rendering two buttons to increase or decrease the number in the middle. First usage of useState is shown in line 4, where we set an array of two values, the first value is the current state value, which is count in our example, shown in line 17 when we input the number in <code>&lt;span&gt; {count} &lt;/span&gt;</code> . The second value is a function that we call setCount to update the current count. This setCount is being used line 6 through line 12 to increase / decrease the count based on the buttons that we click on. On the right side of the equation we define our useState and set the initial value to 0.</p><figure></figure><p>Based on this simple example, we can click on the \u2014 or + buttons to decrease or increase our count. But there are a few errors, or should we say practically not the best usages of useState feature for React Hooks. Let us take a look at the above code snippet to see a different usage of useState. We can tell that in line 9 our useState is now a callback function that calls countInitial(). Why do we do that? It is because using a callback function when we are initializing useState means that we only want it to run once, if we initialize useState to a number or function, it will run every time we render the page (essentially when we increase or decrease the count, the countInitial will run again). But if we set it to a callback function, it would only run once when we first render this page. It can be especially helpful when the function gets more complicated and requires lots of calculations. This will significantly reduce the amount of things that need to re-render each time when we render this page, and it can be very helpful to a larger application. Obviously in our simple example, setting useState(0) is not a problem since we are only calculating the count number.</p><figure></figure><p>From this code snippet above, we can see another problem when we are using setState. In this example, we are trying to initialize count1 to 0, count2 to 1, and increase or decrease only count1 number when we press those buttons, however, the count2 number disappear as soon as we click the + or \u2014 button, which is because React Hooks doesn\u2019t automatically update and set everything inside an object to what we want. Instead it is overwritten by what we returned on line10 and line16. The solution to this problem would be to return everything in the object on line10 and line16 <code>return { ...currentState, count: currentState.count \u2014 1}</code> This will allow us to return everything else in the current state, then increase / decrease only the count1 number in our example. This brings", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "78e8b2fb-2f65-445c-9006-abc765ba1b37": {"__data__": {"id_": "78e8b2fb-2f65-445c-9006-abc765ba1b37", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0dca7797-e1c0-4221-aa01-c357dabb6420", "node_type": null, "metadata": {}, "hash": "a9d378288c0a729eb295b087eaa46cc5e895aa45ff433427133c48dd7a25286d"}}, "hash": "a9d378288c0a729eb295b087eaa46cc5e895aa45ff433427133c48dd7a25286d", "text": "How the useState Hook Works<div><article>\n <header>\n <div>\n <p><a href=\"/jonstodle\"></a>\n </p>\n \n </div>\n </header>\n <div>\n <p>I recently tried to explain to a friend how the <code>useState</code> hook works in React. I thought my analogy was quite a good one, so here goes!</p>\n<p>Imagine React has a large warehouse where it can store information you don't want to reset every time React updates the view. We'll call this warehouse <em>Central Storage</em>.</p>\n<p>To be able to store information in Central Storage, we'll have to reserve shelf space. We reserve shelf space by calling <code>useState</code>. <code>useState</code> takes a value which will be the default information stored in your shelf space.</p>\n<p><code>useState</code> returns an array with two items:</p>\n<ol>\n<li>A fresh <em>copy</em> of the information stored in your shelf space. We'll receive a fresh copy every time React updates the view.</li>\n<li>A function which let's us overwrite the information stored in your shelf space. To permanently change the information, which we receive a copy of in <em>1</em>, we have to call this function with the new information.</li>\n</ol>\n<p>Our code will look something like this:<br />\n</p>\n<div>\n<pre><code>\nconst shelfSpace = useState(\"Hello World!\");// ^ ^ ^ // | | | // \u221f Array containing a copy of the information stored in your shelf space, and a function to overwrite // the information stored in your shelf space // | | // \u221f \"Reserve shelf space\" // | // \u221f Store \"Hello World!\" in the shelf space when reserving the shelf spaceconst message = shelfSpace[0];// ^ ^ // | | // \u221f Store the copy of the information in your shelf space in a more conveniently named variable. It has a // name which better describe the information. // | // \u221f The copy of the information will always be the first item in the array returned by // useState. At index 0, in other wordsconst overwriteMessage = shelfSpace[1];// ^ ^ // | | // \u221f Store the function for overwriting the information in your shelf space in a more conveniently // named variable. It better describes what the function does. // | // \u221f The function for overwriting the information in your shelf space will always // be the second item in the array returned by useState. // At index 1, in other words\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>We don't have to use three lines of code for every reservation i Central Storage. We can shorten it to this:<br />\n</p>\n<div>\n<pre><code>\nconst [message, overwriteMessage] = useState(\"Hello World!\");// ^ ^ // | | // \u221f \"Unpack\" the list returned by useState and store the first item in the array (index 0) // in a variable named `message` // | // \u221f Store the second item in the array (index 1) in a variable named `overwriteMessage`\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>When making changes to our copy of the information we've received from Central Storage, those changes will not show up in your shelf space in Central Storage automatically. We have to explicitly ask for the information in your shelf space in Central Storage to be overwritten.</p>\n<p>Even if we update the variable <code>message</code> in your code...<br />\n</p>\n<div>\n<pre><code>\nconst [message, overwriteMessage] = useState(\"Hello World!\");message = \"Hello Programming!\";\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit fullscreen mode\n \n</p>\n</div>\n</div>\n<p>... it won't change the information in your shelf space in Central Storage. We've just modified our copy of the information. The", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d9a2e5b6-4986-47cb-9c89-7000457febc7": {"__data__": {"id_": "d9a2e5b6-4986-47cb-9c89-7000457febc7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "54c5453f-b732-4667-9084-6485fba8288e", "node_type": null, "metadata": {}, "hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b"}}, "hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b", "text": "How to Manage State in Your React Apps<div><div>\n <p>Managing state in your React apps isn\u2019t as simple as using <code>useState</code> or <code>useReducer</code>.</p>\n<p>Not only are there are a lot of different kinds of state, but there often dozens of ways of managing each kind. Which should you choose?</p>\n<p>In this guide, we will uncover the several kinds of state in your React apps that you might not be aware of, plus how to manage them in the most effective way.</p>\n<p><strong>The Four Kinds of React State to Manage</strong></p>\n<p>When we talk about state in our applications, it\u2019s important to be clear about what types of state actually matter.</p>\n<p>There are four main types of state you need to properly manage in your React apps:</p>\n<p>Local state<br />\nGlobal state<br />\nServer state<br />\nURL state<br />\nLet's cover each of these in detail:</p>\n<p><strong>Local (UI) state</strong> \u2013 Local state is data we manage in one or another component.</p>\n<p>Local state is most often managed in React using the <code>useState</code> hook.</p>\n<p>For example, local state would be needed to show or hide a modal component or to track values for a form component, such as form submission, when the form is disabled and the values of a form\u2019s inputs.</p>\n<p>*<em>Global (UI) state *</em>\u2013 Global state is data we manage across multiple components.</p>\n<p>Global state is necessary when we want to get and update data anywhere in our app, or in multiple components at least.</p>\n<p>A common example of global state is authenticated user state. If a user is logged into our app, it is necessary to get and change their data throughout our application.</p>\n<p>Sometimes state we think should be local might become global.</p>\n<p>Server state \u2013 Data that comes from an external server that must be integrated with our UI state.</p>\n<p>Server state is a simple concept, but can be hard to manage alongside all of our local and global UI state.</p>\n<p>There are several pieces of state that must be managed every time you fetch or update data from an external server, including loading and error state.</p>\n<p>Fortunately there are tools such as SWR and React Query that make managing server state much easier.</p>\n<p>URL state \u2013 Data that exists on our URLs, including the pathname and query parameters.</p>\n<p>URL state is often missing as a category of state, but it is an important one.<br />\nIn many cases, a lot of major parts of our application rely upon accessing URL state. Try to imagine building a blog without being able to fetch a post based off of its slug or id that is located in the URL!</p>\n<p>There are undoubtedly more pieces of state that we could identify, but these are the major categories worth focusing on for most applications you build.</p>\n<p><strong>How to Manage Local State in React</strong><br />\nLocal state is perhaps the easiest kind of state to manage in React, considering there are so many tools built into the core React library for managing it.</p>\n<p><code>useState</code> is the first tool you should reach for to manage state in your components.</p>\n<p>It can take accept any valid data value, including primitive and object values. Additionally, its setter function can be passed down to other components as a callback function (without needing optimizations like <code>useCallback</code>).<br />\n</p>\n<div>\n<pre><code>import { useState } from \"react\";\nfunction Layout() {\n const [isSidebarOpen, setSidebarOpen] = useState(false);\n return (\n &lt;&gt;\n &lt;Sidebar isSidebarOpen={isSidebarOpen} closeSidebar={() =&gt; setSidebarOpen(false)} /&gt;\n {/* ... */}\n &lt;/&gt;\n );\n}\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit full", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b3bf21a9-7283-4a11-a09c-c44c6659e247": {"__data__": {"id_": "b3bf21a9-7283-4a11-a09c-c44c6659e247", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d000078c-a8bb-499f-b577-79fdfbfb8a36", "node_type": null, "metadata": {}, "hash": "8376a8f11f49540490576e7226beb3f3a62711dcc25693010678dc3c6af22a39"}}, "hash": "8376a8f11f49540490576e7226beb3f3a62711dcc25693010678dc3c6af22a39", "text": "Introduction to React Hooks<div><div>\n \n <main>\n <div>\n <article>\n <header>\n <div>\n <p><a href=\"/ksowah\"></a>\n </p>\n \n </div>\n </header>\n <div>\n <p>Welcome back, readers, to another blog where I attempt to demystify and clarify a specific web development topic. This blog post will concentrate on defining React Hooks and demonstrating how to use them in your React application.</p>\n<p>React is a JavaScript library that makes it simple to construct rich user interfaces and single page applications. You develop your user interface using components that you generate in React. State and props are two of the most essential React component features. A React component's state is an object that controls how the component renders and functions. Only class-based components could hold state prior to the invention of hooks. On the other hand, using props enables us to communicate with our components. The official <a href=\"https://reactjs.org/\">website</a> is definitely a good place to start if you want to learn more about React.</p>\n<p>With the introduction of hooks in version 16.8 of the React library, you may now use state and other React capabilities without the need for classes. In other words, a functional component allows for the addition and modification of state. You can utilize a number of React hooks, but for the sake of this article, I'll concentrate on <code>useState</code> which is one of the most crucial and widely used hooks.</p>\n<p><strong>useState Hook</strong><br />\nThe <code>useState</code> hook enables us to use and control state inside a functional component. The <code>useState</code> hook is used in the basic functional component shown below as an example.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--D0K7dUW4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g510x5ykfms8c1f05vb5.png\"></a></p>\n<p>This component is made up of an <code>input</code> tag and a <code>h1</code> tag. The information you type in the <code>input</code> tag is shown in the <code>h1</code> tag as you type.</p>\n<p>The <code>useState</code> hook from the React library is imported in line one of the code above. However, line 5 of the code is the most crucial one. We start using our imported <code>useState</code> hook here. In essence, the <code>useState</code> hook is a function that takes an initial state. I passed an empty string in our example. A pair of values are returned in an array by the <code>useState</code> hook.</p>\n<p>The array's first value is the state as it is at the moment, and its second value is a function that lets you modify or update the state. The two values are extracted from the array and stored in separate constants using array destructuring in the code above.</p>\n<p>In contrast to object destructuring, array destructuring allows you to use any name for your constants, but order is crucial. When naming your function, start with <code>set</code>, you'll often use the format shown below, followed by the name of the constant you used to store the current state. as in \"<code>setName</code>,\" \"<code>setAge</code>,\" \"<code>setColor</code>,\" etc.</p>\n<p>We make use of the <code>setName</code> method in the <code>onChange</code> event on line 10. The <code>setName</code> function receives the value of the input tag, which updates the state in this case, the <code>name</code> constant.</p>\n<p>I would like to draw your attention to the fact that the <code>useState</code> hook can be used many times within one functional component. See image below \ud83d\udc47</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "61f07b15-6135-4611-b22c-2e152de815cf": {"__data__": {"id_": "61f07b15-6135-4611-b22c-2e152de815cf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ceb6406c-5c0a-417f-8938-ff9420dd3019", "node_type": null, "metadata": {}, "hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b"}}, "hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b", "text": "Why State Management is Important For React Apps<div><div><article><div><p></p><h2>Manage your data well enough to make your apps efficient</h2><p></p><figure><figcaption>Photo by <a href=\"https://unsplash.com/@7bbbailey?utm_source=medium&amp;utm_medium=referral\">Barth Bailey</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>When it comes to software engineering it\u2019s all about the data. Databases store the data, server-side technologies like Java, .NET, etc move data around and from server to client, Frontend frameworks use that data and show that to the user. All the tools and frameworks that we use to make\u2026</p></div></article></div>", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"0c24da50-9093-4620-be33-74764265cfd9": {"node_ids": ["a0c82c57-3de7-493e-99d3-a2d27c5a34d0"], "metadata": {}}, "88c91ea4-ae52-4660-a48f-d172367a596b": {"node_ids": ["54a1b66a-e631-4dff-a37a-dd39bb2daaf5"], "metadata": {}}, "1e48d29b-0193-4de6-b864-3e6047cf11eb": {"node_ids": ["f56f30ad-23f2-4d5c-89b4-e76003cf0431"], "metadata": {}}, "dff73b6a-d0c1-4676-9afa-7eaabc4483ed": {"node_ids": ["34adb75e-ba6d-4f9b-b4d3-18ca00df30b1"], "metadata": {}}, "dc42e523-2fe3-406d-983e-a6bae80067af": {"node_ids": ["6996fe6c-2d31-4ad7-8bc3-4dee833aea51"], "metadata": {}}, "6191df8c-b33d-4146-98c1-33a538b91568": {"node_ids": ["c01b1e10-181c-4d09-9e65-7824bb265883"], "metadata": {}}, "aed56cc0-11b1-4701-a759-feff0d07baf4": {"node_ids": ["ad34a3eb-275e-4cca-b7d4-072e23fdadbf"], "metadata": {}}, "9bac7d87-7580-4fc4-8528-00a106211bb6": {"node_ids": ["51a25c1b-cc9e-4be6-9d2f-ade7426d5848"], "metadata": {}}, "f5c22416-0b79-45b0-a643-e519197bff81": {"node_ids": ["62812b10-43f9-4ff0-918a-5fefcbf53627"], "metadata": {}}, "9f66f562-b6ba-4a73-bcb3-d87169df4ec0": {"node_ids": ["412d80b8-3e49-4b18-b6f6-d61a9566c0fa"], "metadata": {}}, "7587aff4-be92-460c-8f4d-2d5b521a9273": {"node_ids": ["6b7879e1-3a03-4f4b-9b0a-38a61a526da3"], "metadata": {}}, "bcb1bc5d-287f-4207-88e4-358733a5060b": {"node_ids": ["f05f9f6b-5918-444d-acc1-c21a571f30f2"], "metadata": {}}, "7975c7ee-87f0-4869-a5dc-49693da350fd": {"node_ids": ["4c5292b2-f365-48fd-a33b-47ecee9fae63"], "metadata": {}}, "c65632a5-0f62-456a-b595-b635e82b999b": {"node_ids": ["6d752588-6602-44e2-8b8f-3d3bfa6d829a"], "metadata": {}}, "d3cc0d86-993b-4171-a7b9-dbfa880c9ad8": {"node_ids": ["e892e73e-2d27-4168-b24f-ae330af81a58"], "metadata": {}}, "0f4f4096-c632-4cd8-8b67-2d7d069644d0": {"node_ids": ["2cb49640-e30a-4c8d-b5f0-2bb71904a905"], "metadata": {}}, "0dca7797-e1c0-4221-aa01-c357dabb6420": {"node_ids": ["78e8b2fb-2f65-445c-9006-abc765ba1b37"], "metadata": {}}, "54c5453f-b732-4667-9084-6485fba8288e": {"node_ids": ["d9a2e5b6-4986-47cb-9c89-7000457febc7"], "metadata": {}}, "d000078c-a8bb-499f-b577-79fdfbfb8a36": {"node_ids": ["b3bf21a9-7283-4a11-a09c-c44c6659e247"], "metadata": {}}, "ceb6406c-5c0a-417f-8938-ff9420dd3019": {"node_ids": ["61f07b15-6135-4611-b22c-2e152de815cf"], "metadata": {}}}}