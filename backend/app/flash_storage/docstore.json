{"docstore/metadata": {"bd17589d-cd8e-4f84-ad2a-6187b37b480b": {"doc_hash": "01ad90942216fb4c74b7b018dac4cc12edd7e40e75ef2cbfbeaf9747298974b7"}, "392ac4f5-3b25-4651-9ffd-203ff8a39695": {"doc_hash": "32d2025a4f2b19b343a62480c3a20b1203628e5edb1a62aec734dea2de20e52d"}, "1585d989-80e8-4a7f-ad36-f08a9c75fb6b": {"doc_hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b"}, "96e16e27-1d4f-49e6-9dd6-ad4f66ad1249": {"doc_hash": "3e12e6dea2bf55c3acb7b32434c3dfb0163f9caed76e8afa3ef5b93f90a4b5f2"}, "14825d59-ed28-46ad-86a2-03e04368e091": {"doc_hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b"}, "441eb737-39a0-4448-b96b-00b53f829e61": {"doc_hash": "01ad90942216fb4c74b7b018dac4cc12edd7e40e75ef2cbfbeaf9747298974b7", "ref_doc_id": "bd17589d-cd8e-4f84-ad2a-6187b37b480b"}, "f8b331ea-54d6-4f02-9529-b7c23a55d9b1": {"doc_hash": "32d2025a4f2b19b343a62480c3a20b1203628e5edb1a62aec734dea2de20e52d", "ref_doc_id": "392ac4f5-3b25-4651-9ffd-203ff8a39695"}, "0f391043-52cb-45a3-96b1-621718485039": {"doc_hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b", "ref_doc_id": "1585d989-80e8-4a7f-ad36-f08a9c75fb6b"}, "3a10f940-187c-4b9a-bab6-02bed16868fe": {"doc_hash": "3e12e6dea2bf55c3acb7b32434c3dfb0163f9caed76e8afa3ef5b93f90a4b5f2", "ref_doc_id": "96e16e27-1d4f-49e6-9dd6-ad4f66ad1249"}, "9bef441f-0d80-411b-bee8-add0b944a997": {"doc_hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b", "ref_doc_id": "14825d59-ed28-46ad-86a2-03e04368e091"}}, "docstore/data": {"441eb737-39a0-4448-b96b-00b53f829e61": {"__data__": {"id_": "441eb737-39a0-4448-b96b-00b53f829e61", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd17589d-cd8e-4f84-ad2a-6187b37b480b", "node_type": null, "metadata": {}, "hash": "01ad90942216fb4c74b7b018dac4cc12edd7e40e75ef2cbfbeaf9747298974b7"}}, "hash": "01ad90942216fb4c74b7b018dac4cc12edd7e40e75ef2cbfbeaf9747298974b7", "text": "React state management: What is it and why to use it? | LoginRadius Blog<div><div><p>Biggest Challenge in React application is the management of state for frontend developers. In large applications, React alone is not sufficient to handle the complexity which is why some developers use React hooks and others use state management libraries such as Redux.</p>\n<p>In this post, We are going to take a closer look at both React hooks and Redux to manage the state.</p>\n<h2><a href=\"#what-is-react-state-management\"></a>What is React State Management?</h2>\n<p>React components have a built-in state object. The state is encapsulated data where you store assets that are persistent between component renderings.</p>\n<p>The state is just a fancy term for a JavaScript data structure. If a user changes state by interacting with your application, the UI may look completely different afterwards, because it's represented by this new state rather than the old state.</p>\n<blockquote>\n<p><strong>Make a state variable responsible for one concern to use efficiently</strong>.</p>\n</blockquote>\n<h2><a href=\"#why-do-you-need-react-state-management\"></a>Why do you need React state management?</h2>\n<p>React applications are built using components and they manage their state internally and it works well for applications with few components, but when the application grows bigger, the complexity of managing states shared across components becomes difficult.</p>\n<p>Here is a simple example of an e-commerce application, in which the status of multiple components will change when purchasing a product.</p>\n<ul>\n<li>Add that product to the shopping list</li>\n<li>Add product to customer history</li>\n<li>trigger count of purchased products</li>\n</ul>\n<p>If developers do not have scalability in mind then it is really hard to find out what is happening when something goes wrong. This is why you need state management in your application.</p>\n<p>Let\u2019s discuss how to use react state management using react hooks and redux</p>\n<h2><a href=\"#what-is-redux\"></a>What is Redux?</h2>\n<p>Redux was created to resolve this particular issue. it provides a central store that holds all states of your application. Each component can access the stored state without sending it from one component to another. Here is a simple view of how Redux works.</p>\n<p>\n <a href=\"/static/878d2cde053633bfea88a8bfcfc28e89/29007/image1.png\">\n \n \n </a>\n </p>\n<p>There are three building parts: actions, store, and reducers. Let\u2019s briefly discuss what each of them does.</p>\n<h4><a href=\"#actions-in-redux\"></a>Actions in Redux</h4>\n<p>Actions are payloads of information that send data from your application to your store. Actions are sent using <a href=\"https://redux.js.org/api/store#dispatchaction\"><code>store.dispatch()</code></a>. Actions are created via an action creator.\nHere is an example action that represents adding a new todo item:</p>\n<pre><code>{ \ntype: \"ADD_TODO\", \npayload: {text:\"Hello Foo\"}\n }</code></pre>\n<p>Here is an example of its action creator:</p>\n<pre><code>ocnst addTodo = (text) =&gt; {\n return {\n type: \"ADD_TODO\",\n text\n };\n}</code></pre>\n<h4><a href=\"#reducers-in-redux\"></a>Reducers in Redux</h4>\n<p>Reducers specify how the application's state changes in response to actions sent to the store.\nAn example of how Reducer works in Redux is as follows:</p>\n<pre><code> const TODOReducer= (state = {}, action) =&gt; {\n switch (action.type) {\n case \"ADD_TODO\":\n return {\n ...state,\n ...action.payload\n };\n default:\n return state;\n }\n};</code></pre>\n<h4", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f8b331ea-54d6-4f02-9529-b7c23a55d9b1": {"__data__": {"id_": "f8b331ea-54d6-4f02-9529-b7c23a55d9b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "392ac4f5-3b25-4651-9ffd-203ff8a39695", "node_type": null, "metadata": {}, "hash": "32d2025a4f2b19b343a62480c3a20b1203628e5edb1a62aec734dea2de20e52d"}}, "hash": "32d2025a4f2b19b343a62480c3a20b1203628e5edb1a62aec734dea2de20e52d", "text": "How To Manage React States Like A Pro<div><div><figure><figcaption>Photo by <a href=\"https://unsplash.com/@afgprogrammer?utm_source=medium&amp;utm_medium=referral\">Mohammad Rahmani</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>State management is one of the most challenging parts of the application. There are tons of state management libraries out there. Understanding how to manage states so effectively that it doesn\u2019t affect your app performance is crucial.</p><p>The \u201csecret\u201d behind excellent state management is understanding how your app maps state to the app\u2019s tree structure.</p><h2>Four mistakes commonly made with state management:</h2><ul><li>Thinking Redux is a silver bullet to every state management problem.</li><li>Storing local state in state stores like Redux.</li><li>Storing all or multiple unrelated application states in a single object.</li><li>Storing props passed to the component inside the state.</li></ul><h2><strong>Give expensive state calculation a boost</strong></h2><p>Sometimes your initial state value needs to be generated using some expensive calculation or operation, such as from local storage. This little trick can boost the performance of your application by initializing those state values using a lazy initialization technique.</p><p>The technique is straightforward when using the `useState` hook; instead of directly initializing the state, pass a function to it that will return the initial value of the state.</p><figure></figure><p>It works because creating a function is quicker than directly performing expensive computations. When you pass a function to the `useState` hook, React will only execute the function when it needs the initial value of the state.</p><h2><strong>Manage asynchronous states like a pro</strong></h2><p>Managing states when your app is doing asynchronous operations may be a pain. To solve this problem, we can use a set of techniques to handle those complex scenarios very quickly. <a href=\"/get-rid-of-stale-states-in-react-once-and-for-all-e52ffe09a7bd\">Check out this quick guide</a> to help manage states in these difficult scenarios.</p><h2><strong>Manage complex states seamlessly</strong></h2><p>There are times when your app has complex state values. Handling those complex states becomes super easy with this small technique. It allows you to add your own custom logic to handle complex states in React seamlessly.</p><p>The technique is called the state reducer pattern. It is very simple to use. What you need to do is that you use: the `useReducer` hook. This hook allows you to pass a custom state reducer as the first parameter and an initial value as the second parameter. The reducer can use any custom logic to calculate the final state value. The value returned by the reducer will be used as the next state value.</p><figure></figure><h2><strong>Use these thumb rules for clear state management</strong></h2><ul><li>Avoid derived state. It means that you should never set values passed as props to the state. Every value should be either fully controlled (through props) or fully uncontrolled (in the local state).</li><li>Avoid making truly local state global. Ask yourself: If this component was rendered twice, should this interaction reflect in the other parts of the app? If the answer is no, then keep state local only.</li><li>To perform expensive calculations from props with performance, use the `useMemo` hook and pass those props in the list of dependencies.</li><li>Do not store all or unrelated states together in single object. It will make them difficult to manage.</li><li>Prefer using compound components when you need to share some common states in a tree of related components. <a href=\"/5-steps-to-build-react-components-like-a-pro-fb1f3af6ba17\">Check out this guide</a> to build components like a pro.</li></ul><h2>Go composable: Build apps faster like Lego</h2><figure><a href=\"https://bit.cloud/\"></a></figure><p><a href=\"https://bit.cloud/", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0f391043-52cb-45a3-96b1-621718485039": {"__data__": {"id_": "0f391043-52cb-45a3-96b1-621718485039", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1585d989-80e8-4a7f-ad36-f08a9c75fb6b", "node_type": null, "metadata": {}, "hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b"}}, "hash": "9efe74dee53d69ff5dc11d6fb57d1041917771a0f8bcadcef90512f9038cc56b", "text": "How to Manage State in Your React Apps<div><div>\n <p>Managing state in your React apps isn\u2019t as simple as using <code>useState</code> or <code>useReducer</code>.</p>\n<p>Not only are there are a lot of different kinds of state, but there often dozens of ways of managing each kind. Which should you choose?</p>\n<p>In this guide, we will uncover the several kinds of state in your React apps that you might not be aware of, plus how to manage them in the most effective way.</p>\n<p><strong>The Four Kinds of React State to Manage</strong></p>\n<p>When we talk about state in our applications, it\u2019s important to be clear about what types of state actually matter.</p>\n<p>There are four main types of state you need to properly manage in your React apps:</p>\n<p>Local state<br />\nGlobal state<br />\nServer state<br />\nURL state<br />\nLet's cover each of these in detail:</p>\n<p><strong>Local (UI) state</strong> \u2013 Local state is data we manage in one or another component.</p>\n<p>Local state is most often managed in React using the <code>useState</code> hook.</p>\n<p>For example, local state would be needed to show or hide a modal component or to track values for a form component, such as form submission, when the form is disabled and the values of a form\u2019s inputs.</p>\n<p>*<em>Global (UI) state *</em>\u2013 Global state is data we manage across multiple components.</p>\n<p>Global state is necessary when we want to get and update data anywhere in our app, or in multiple components at least.</p>\n<p>A common example of global state is authenticated user state. If a user is logged into our app, it is necessary to get and change their data throughout our application.</p>\n<p>Sometimes state we think should be local might become global.</p>\n<p>Server state \u2013 Data that comes from an external server that must be integrated with our UI state.</p>\n<p>Server state is a simple concept, but can be hard to manage alongside all of our local and global UI state.</p>\n<p>There are several pieces of state that must be managed every time you fetch or update data from an external server, including loading and error state.</p>\n<p>Fortunately there are tools such as SWR and React Query that make managing server state much easier.</p>\n<p>URL state \u2013 Data that exists on our URLs, including the pathname and query parameters.</p>\n<p>URL state is often missing as a category of state, but it is an important one.<br />\nIn many cases, a lot of major parts of our application rely upon accessing URL state. Try to imagine building a blog without being able to fetch a post based off of its slug or id that is located in the URL!</p>\n<p>There are undoubtedly more pieces of state that we could identify, but these are the major categories worth focusing on for most applications you build.</p>\n<p><strong>How to Manage Local State in React</strong><br />\nLocal state is perhaps the easiest kind of state to manage in React, considering there are so many tools built into the core React library for managing it.</p>\n<p><code>useState</code> is the first tool you should reach for to manage state in your components.</p>\n<p>It can take accept any valid data value, including primitive and object values. Additionally, its setter function can be passed down to other components as a callback function (without needing optimizations like <code>useCallback</code>).<br />\n</p>\n<div>\n<pre><code>import { useState } from \"react\";\nfunction Layout() {\n const [isSidebarOpen, setSidebarOpen] = useState(false);\n return (\n &lt;&gt;\n &lt;Sidebar isSidebarOpen={isSidebarOpen} closeSidebar={() =&gt; setSidebarOpen(false)} /&gt;\n {/* ... */}\n &lt;/&gt;\n );\n}\n</code></pre>\n<div>\n<p>\n Enter fullscreen mode\n \n Exit full", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3a10f940-187c-4b9a-bab6-02bed16868fe": {"__data__": {"id_": "3a10f940-187c-4b9a-bab6-02bed16868fe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "96e16e27-1d4f-49e6-9dd6-ad4f66ad1249", "node_type": null, "metadata": {}, "hash": "3e12e6dea2bf55c3acb7b32434c3dfb0163f9caed76e8afa3ef5b93f90a4b5f2"}}, "hash": "3e12e6dea2bf55c3acb7b32434c3dfb0163f9caed76e8afa3ef5b93f90a4b5f2", "text": "Mastering React State Management: Tips & Tricks<div><div><figure></figure><p>Hello, Welcome to Tech Artifacts. I hope you are doing well.</p><p>In this blog, we are going to cover the topic of React State Management. State management is the process of maintaining and updating the data or state of a client-side application over time.</p><p>If you are new to React, I would recommend you first take a look at the below blogs \u2013</p><ol><li><a href=\"https://techartifacts.com/introduction-to-react/\">Introduction to React</a></li><li><a href=\"https://techartifacts.com/react-components-and-props/\">React \u2013 Components and props</a></li></ol><div><nav><ul><li><a href=\"https://techartifacts.com/react-state-management/#State_Management\">State Management</a></li><li><a href=\"https://techartifacts.com/react-state-management/#Importance_of_Statement_Management_in_React\">Importance of Statement Management in React</a><ul><li><a href=\"https://techartifacts.com/react-state-management/#Improves_Consistency\">Improves Consistency</a></li><li><a href=\"https://techartifacts.com/react-state-management/#Improves_Maintenance_and_Scalability\">Improves Maintenance and Scalability</a></li><li><a href=\"https://techartifacts.com/react-state-management/#Improves_Application_Performance\">Improves Application Performance</a></li></ul></li><li><a href=\"https://techartifacts.com/react-state-management/#Example_of_Statement_Management_in_React\">Example of Statement Management in React</a></li><li><a href=\"https://techartifacts.com/react-state-management/#useState_Hook\">\u201cuseState\u201d Hook</a></li><li><a href=\"https://techartifacts.com/react-state-management/#Other_State_Management_Techniques\">Other State Management Techniques</a></li><li><a href=\"https://techartifacts.com/react-state-management/#Conclusion\">Conclusion</a></li></ul></nav></div><p>Let\u2019s first understand what is state management.</p><p>In client-side applications, state refers to the data that is used by the application to render its user interface (UI). This data can include information such as user input, API responses, and other data that changes dynamically over time.</p><p>State management is an important aspect of building client-side applications. It ensures that the UI remains up-to-date and consistent with the change in the underlying data.</p><p>Without proper state management, it can be challenging to keep track of the data used by an application. The state also helps to ensure that the UI remains in sync with this data.</p><h2>Importance of Statement Management in React</h2><h3>Improves Consistency</h3><p>In React, State Management enables developers to manage the data used to render the user interface. It also helps to keep track of the changes made to this data over time. This helps to prevent inconsistencies in the UI and to ensure that the application remains in a consistent state.</p><h3>Improves Maintenance and Scalability</h3><p>State management also makes it easier to maintain and scale applications. It provides a centralized approach to managing the state of the application. This allows developers to manage the state of the application in a more organized and predictable manner. To make changes to the state without affecting other parts of the application.</p><h3>Improves Application Performance</h3><p>State management can also help to improve performance by reducing the amount of data that needs to be re-rendered when changes are made to the state. By only updating the components that are affected by the changes to the state, React can optimize the performance of the application and provide a more efficient user experience.</p><h2>Example of Statement Management in React</h2><p>The importance of state management in React can be best explained through an example.</p><p>Consider a simple React application that displays a list of to-do items. Each item in the list has a Title, a Description, and a Status that can be either \u201ccomplete\u201d or \u201cincomplete.\u201d</p><p>Without state management, you would have to manage the state of each to-do item individually in the component that", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9bef441f-0d80-411b-bee8-add0b944a997": {"__data__": {"id_": "9bef441f-0d80-411b-bee8-add0b944a997", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "14825d59-ed28-46ad-86a2-03e04368e091", "node_type": null, "metadata": {}, "hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b"}}, "hash": "c8b3d4e5d29cd5ce35274aae41dd7332561eb486b0f4a8373729c3e91a8eb75b", "text": "Why State Management is Important For React Apps<div><div><article><div><p></p><h2>Manage your data well enough to make your apps efficient</h2><p></p><figure><figcaption>Photo by <a href=\"https://unsplash.com/@7bbbailey?utm_source=medium&amp;utm_medium=referral\">Barth Bailey</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>When it comes to software engineering it\u2019s all about the data. Databases store the data, server-side technologies like Java, .NET, etc move data around and from server to client, Frontend frameworks use that data and show that to the user. All the tools and frameworks that we use to make\u2026</p></div></article></div>", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bd17589d-cd8e-4f84-ad2a-6187b37b480b": {"node_ids": ["441eb737-39a0-4448-b96b-00b53f829e61"], "metadata": {}}, "392ac4f5-3b25-4651-9ffd-203ff8a39695": {"node_ids": ["f8b331ea-54d6-4f02-9529-b7c23a55d9b1"], "metadata": {}}, "1585d989-80e8-4a7f-ad36-f08a9c75fb6b": {"node_ids": ["0f391043-52cb-45a3-96b1-621718485039"], "metadata": {}}, "96e16e27-1d4f-49e6-9dd6-ad4f66ad1249": {"node_ids": ["3a10f940-187c-4b9a-bab6-02bed16868fe"], "metadata": {}}, "14825d59-ed28-46ad-86a2-03e04368e091": {"node_ids": ["9bef441f-0d80-411b-bee8-add0b944a997"], "metadata": {}}}}