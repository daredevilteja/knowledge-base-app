Frontend Performance Optimization with Code Splitting using React Lazy & Suspense üî•<div><div><p></p><h2>Frontend Performance Optimization with Code Splitting using React.Lazy &amp; Suspense üî•</h2><p></p><figure></figure><p>Frontend performance is important. JavaScript, though written to be a simple language, can produce surprisingly complex code bases making it difficult to scale up. Part of the reason is that there is a wide variety of classes and modules available. Most substantial JavaScript programs and frameworks have many dependencies, which can make a seemingly simple project embed a large amount of code quickly.</p><p>The more code a project has, the slower the browser will load. Therefore, you often have to balance the size of your dependencies with the performance you expect out of your JavaScript. Code splitting is a useful way to strike this balance.</p><h2>What is code splitting?</h2><figure><figcaption>Client Side Rendering (CSR)</figcaption></figure><p>Many JavaScript frameworks <a href="https://reactjs.org/docs/code-splitting.html">bundle all dependencies</a> into one single large file. This makes it easy to add your JavaScript to an HTML web page. The bundle requires only one link tag with fewer calls needed to set up the page since all the JavaScript is in one place. In theory, bundling JavaScript in this manner should speed up page loads and lower the amount of traffic that page needs to handle.</p><p>At a certain point, however, a bundle grows to a certain size at which the overhead of interpreting and executing the code slows the page load down instead of speeding it up. This critical point is different for every page, and you should test your pages to figure out where this is. There isn‚Äôt a general guideline ‚Äî it all relies on the dependencies which is being loaded.</p><figure><figcaption>Photo : Crystallize.com</figcaption></figure><p>The key to code splitting is figuring out which parts of a page need to use different JavaScript dependencies. Code splitting allows you to strategically remove certain dependencies from bundles, then insert them only where they are needed. Instead of sending all the JavaScript that makes up the application as soon as the first page is loaded, splitting the JavaScript into multiple chunks improves page performance by a huge margin.</p><p>Code splitting is a common practice in large React applications, and the increase in speed it provides can determine whether a user continues using a web application or leaves. <a href="https://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/">Many studies</a> have shown that pages have less than three seconds to make an impression with users, so saving off even fractions of a second could be significant. Therefore, aiming for three seconds or less of load time is ideal.</p><h2>Split and Reduce your Bundles</h2><p>Get rid of anything that takes up too much space. See if there are more lightweight alternatives for the libraries you are using. Using moment.js ? Try out <a href="https://date-fns.org/">date-fns</a>. Using <a href="https://lodash.com/">lodash</a>? Try out <a href="https://www.npmjs.com/package/lodash-es">lodash-es</a>. Make sure you import only the individual parts that you actually use:</p><p>‚úÖ <strong>Do ‚Ä¶</strong></p><p>import find from ‚Äòlodash/find‚Äô; find([])</p><p><strong>‚ùå Don‚Äôt ‚Ä¶</strong></p><p>import _ from ‚Äòlodash‚Äô; _.find([])</p><figure><figcaption>Photo : Crystallize.com</figcaption></figure><h2>How does code splitting work in React?</h2><p>Different bundlers work in different ways, but React has multiple methods to customize bundling regardless of the bundler used.</p><h2>Dynamic imports</h2><p>Perhaps the simplest way to split code in React is with the dynamic ‚Äúimport‚Äù syntax. Some bundlers can parse dynamic import statements natively, while others require some configuration. The dynamic import syntax works for both static site generation and server-side rendering.</