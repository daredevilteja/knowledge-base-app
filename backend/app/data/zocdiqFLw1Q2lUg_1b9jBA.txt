What’s Concurrent with React 18?<div><div><figure></figure><p>React’s previous update, React 17, shipped with <strong>ZERO</strong> new features and was arguably the most boring version of React in the library’s history ⚛️</p><p>At the time people speculated about React’s future, about what this all might mean, going so far as to suggest the library’s best days were behind it.</p><p>Time, however, has given us a new perspective. That the React team are smart mofos playing the long game, reinforcing React’s internals in preparation for React 18 — A huge update, with no breaking changes!</p><p>Come with me on a journey. Together we’ll explore some of the new features in React 18.</p><h2>Suspense</h2><p>Suspense has been around since React 16 but only as an experimental feature. A stable production-ready version of the suspense API is planned for React 18’s release.</p><figure></figure><h2>What Does Suspense Do?</h2><p><strong>Suspense </strong>is a new way to get components to wait for data.</p><p>At the moment, React can’t help but render components straight away whether it has the data it needs or not.</p><p>As devs, we work around this, using conditionals and effects. Often we create a new piece of state that changes when the data has loaded to trigger a re-render and update the component.</p><p>Suspense is basically some syntactic sugar that handles that whole process for you.</p><pre>&lt;Suspense fallback={&lt;Loading/&gt;}&gt;<br /> &lt;PatientComponent&gt;<br />&lt;/Suspense&gt;</pre><p>Nine times out of ten, a fallback component is just a loading component.</p><figure></figure><figure></figure><p>Once the data is available, React is alerted and replaces the fallback component with what was wrapped in your suspense tags</p><p>All of that from a single</p><p>&lt;Suspense/&gt;</p><p>Another cool thing about suspense is it applies to child components and a child components’ child components.</p><p>The suspense block doesn’t need to be the direct parent of the component that’s waiting for data. If data is missing, React will walk up the tree until it finds a fallback component to render.</p><h2>Why Suspense Is Important for Server-Side Rendering?</h2><p><em>“When running React client-side your React App will just show you a blank page while it’s loading.”</em></p><p>SSR (Server Side Rendering) on the other hand is known for its crazy fast initial rendering that gets something pretty in front of the user way sooner.</p><p>This is important — “As <strong>page load time</strong> goes from 1 second to 3 seconds, the probability of <strong>bounce</strong> increases 32%” — <a href="https://www.thinkwithgoogle.com/marketing-strategies/app-and-mobile/page-load-time-statistics/#:~:text=The%20probability%20of%20bounce%20increases,Google%2FSOASTA%20Research%2C%202017.">Google</a>.</p><p>Until recently, I thought this wicked speed was the result of servers being OP, <a href="https://medium.com/r?url=https%3A%2F%2Fgithub.com%2Freactwg%2Freact-18%2Fdiscussions%2F37">but after reading this post from Dan Abramov</a>, I learned how these pages are shown earlier:</p><p><strong>Here are the steps an SSR React application takes to show the user a page.</strong></p><ul><li>On the server, fetch data for the entire app.</li><li>Then, on the server, render the entire app to HTML and send it in the response.</li><li>Then, on the client, load the JavaScript code for the entire app.</li><li>