Manage your state with the useState hook in React<div><div>
 
 <main>
 <div>
 <article>
 <header>
 <p>
 </p>
 <div>
 <p><a href="/fabienschlegel"></a>
 </p>
 
 </div>
 </header>
 <div>
 <p>React introduces hooks in version 16.8. Hooks allow us to create functional components with states and side effects.</p>
<p>The <code>useState</code> is the simplest hook we can encounter in a React project. This method takes one parameter, the initial value of the state and returns two properties, the value itself and a method to update it.</p>
<h2>
 <a href="#rules-of-hooks">
 </a>
 Rules of hooks
</h2>
<p>Like other hooks, there are only two rules to use them. Always use it at the top level of the function, never in loops, conditions and nested functions. You can only use hooks in React functions, never in javascript functions.</p>
<h2>
 <a href="#basic-usage-of-usestate">
 </a>
 Basic usage of useState
</h2>
<div>
<pre><code>import { useState } from 'react';
function App() {
 const [count, setCount] = useState(0);
 const handleIncrease = () =&gt; setCount(count + 1);
 return (
 &lt;div&gt;
 &lt;p&gt;Increase the count to {count + 1}&lt;/p&gt;
 &lt;button onClick={handleIncrease} type="button"&gt;
 Add
 &lt;/button&gt;
 &lt;/div&gt;
 );
}
export default App;
</code></pre>
<div>
<p>
 Enter fullscreen mode
 
 Exit fullscreen mode
 
</p>
</div>
</div>
<p>In the code snippet above, you can see a basic <code>useState</code> implementation. The count variable is initially set to 0 with the parameter of the hook. I name the variable <code>count</code> and the setter <code>setCount</code>. It’s a convention to begin the setter with set and use the variable name after. But it’s not mandatory, do what you want.</p>
<p>I use <code>setCount</code> in the function <code>handleIncrease</code>. Each time the button is clicked, the variable count is updated and React rerenders the component.</p>
<h2>
 <a href="#more-advanced-use-cases">
 </a>
 More advanced use cases
</h2>
<h3>
 <a href="#asynchronous-state-changes">
 </a>
 Asynchronous state changes
</h3>
<p>Often, our components are more complex and we have several states in the same component. We can update them separately or together.</p>
<p>Take our previous example and add some improvements.<br />
</p>
<div>
<pre><code>import { useState } from 'react';
function App() {
 const [counters, setCount] = useState({ fizz: 0, buzz: 0 });
 const handleIncreaseFizz = () =&gt;
 setCount((prevCounters) =&gt; ({ ...prevCounters, fizz: prevCounters.fizz + 1 }));
 const handleIncreaseBuzz = () =&gt;
 setCount((prevCounters) =&gt; ({ ...prevCounters, buzz: prevCounters.buzz + 1 }));
 const handleIncreaseAll = () =&gt;
 setCount((prevCounters) =&gt; ({fizz: prevCounters.fizz + 1, buzz: prevCounters.buzz + 1}));
 return (
 &lt;div&gt;
 &lt;p&gt;Fizz: {counters.fizz} Buzz: {counters.buzz}&lt;/p&gt;
 &lt;button onClick={handleIncreaseFizz} type="button"&gt;Increase Fizz&lt;/button&gt;
 &