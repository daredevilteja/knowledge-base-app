An unusual usage of React Suspense<div><div><figure><figcaption>Photo by <a href="https://unsplash.com/@kaip?utm_source=medium&amp;utm_medium=referral">Kai Pilger</a> on <a href="https://unsplash.com/?utm_source=medium&amp;utm_medium=referral">Unsplash</a></figcaption></figure><h2>What is React Suspense?</h2><p>It’s a mechanism making it possible to postpone the rendering of certain child components depending on some condition. Right now, it’s widely used to implement lazy loading. While an expensive component is being fetched, there may be some fallback displayed in a form of an animated spinner or other loading indicator.</p><figure></figure><h2>How do you make your components Suspense-worthy?</h2><p>Actually, it’s very simple. It turns out that as long as your components throw promise during render, you’re good to go. Suspense will wait for it to resolve and then render your component normally. Anything other than promise will normally trigger error boundaries or, in the worst case, will cause the application to crash. This behavior has really interesting appliances.</p><p>Unfortunately, throwing during rendering means effects won’t be executed, so you need to control suspension state through a prop. In other words, suspension must be controlled by the parent.</p><figure></figure><h2>Why would I do that?</h2><p>Let’s say we are developing a mobile application using React Native. There are multiple screens relying on Redux (or some other global storage) and receiving updates in real time. We are using stack navigation, so every screen is put on stack when the user navigates further and then popped when he decides to go back. If updates are frequent and causing long, expensive renders, it would be nice to be able to halt them or, in other words, freeze affected screens.</p><h2>Does any production-grade library use this scheme?</h2><p>The code snippet I attached earlier comes from the <a href="https://github.com/software-mansion/react-freeze">react-native-freeze</a> library created by really talented guys from <a href="https://swmansion.com/">Software Mansion</a>. It’s now natively supported in <a href="https://github.com/software-mansion/react-native-screens">react-native-screens</a> and can be used to freeze screens in the background, stopping their execution and saving precious computation power. Keep in mind that you have to be using React v17 or React Native 0.64 at least to use it. If you end up using it, remember to leave a star in their repository!</p><h2>Suspense in the future</h2><p>React Suspense receives more and more attention with every new release on React. It’s been recently upgraded to support the brand-new concurrent mode shipped with v18, so its use-cases are now not only limited to dynamic components and lazy-loading. If you would like to know more, I recommend checking <a href="https://reactjs.org/blog/2022/03/29/react-v18.html">the official release notes</a> for details or waiting for another article of mine uncovering the secrets of React internals.</p></div>