React 18 — What’s New!<div><div><p>Everything New In React 18</p><figure><figcaption>React 18 new features</figcaption></figure><p>React 17 was a bit of a bore for developers. There really wasn’t a lot added but it’s definitely not the case with react 18. In this article, I will tell you some of the top updates and show you how to get started using React 18 alpha today. Links to everything mentioned will be below.</p></div><div><p>With React 18 there’s a new Root API. Here’s what you’re used to seeing. We pass <strong>ReactDom.render </strong>our app component and then <strong>document.getElementById</strong> and our root element. So we’re rendering our app component into our root element on the page. Pretty Simple!</p><figure></figure><p>Here’s a new way. We have a root variable that is equal to a new method called <strong>create root</strong>. This is being passed our root element and then we call <strong><em>root.render</em></strong> and pass our app component.</p><figure></figure><p>It’s accomplishing the same thing but differently. The old way is now called the <strong>Legacy Root API</strong> and It’s still going to work in React 18 but will be deprecated at some point by using the new Root API. You’re going to get access to all of the React 18 improvements including the concurrent features that we’re going to talk about in this article.</p><h2><strong>Suspense</strong></h2><p>The suspense is finally over in this update we’re going to get full support for suspense. Now, what is suspense? As the name implies it suspends something until it’s ready to be rendered.</p><p>In this example, we have a component that needs time to fetch data before it’s ready to be rendered.</p><figure></figure><p>The suspense will use the <em>fallback</em> until the data is returned and the components are rendered. It’s important to note here that the random component here is not waiting on data, but it will still be suspended until everything inside the suspense is ready to be rendered.</p><p>And now the suspense is going to be extremely useful with <strong>SSR</strong> or <strong>Server Side Rendering</strong>. Currently, with SSR you’re going to get <strong>fully rendered HTML</strong> but your browser still has to load the JavaScript and hydrate the entire page before it can become interactive. Suspense could speed up this load time dramatically.</p><p>Using the <strong>React 18</strong> working group repo example, we have a page loading a navbar, a sidebar, a post, and a comment.</p><figure></figure><p>Now we really don’t need the comments to load before the site becomes interactive. So we’re going to suspend the comments. So that the viewer can start reading the article and then we’ll load the comments in the background.</p><p>Another cool thing about suspense is selective <strong>hydration</strong>.</p><figure></figure><p>In this example., we’re suspending the sidebar and the comments. Hydration will begin on the first suspended component in the tree. So the sidebar will hydrate first but if the user tries to interact with the comments section, React will prioritize hydrating the comments instead of the sidebar.</p><h2><strong>Automatic Batching</strong></h2><p>In React 17 and earlier react with batch re-render updates during a browser event like a click. Here’s an example from the docs.</p><figure></figure><p>So in this handle click react will batch these two state updates into one single re-render.</p><figure></figure><p>But if you need to <em>fetch data</em> and then update the state these re-renders <strong>will not be batched</strong>.</p><p>With react 18, If you’re using the new <strong><em>Create Root API</em></strong>, all state updates will automatically be batched no matter when they happen. If you do have a critical component that you don’t want