React Context API - an Implementation Quick Guide<div><div>
 <p><a href="/loopdeluce"></a>
 </p>
 <div>
 <p><a href="/loopdeluce">Lucy Bullen</a></p><p>
 Posted on <time>Jun 22, 2022</time>
 â€¢ Updated on <time>Jun 26, 2022</time>
 </p>
 </div>
 </div><div>
 <p>Implementing the React Context API is one way to implement <strong>global state</strong> in an application. </p>
<p><strong>Global state</strong> is useful when there are child components that need access to the same piece of state nested in disjointed areas of the component tree. Examples of this include: the toggling of a dark mode layout and accessing user information for personalized application formatting. </p>
<p>The local state management methodology calls for this to be solved using <strong>prop drilling</strong> - defining state at a shared higher level component and passing the variable down to child components, and child components' child components, using props. With a complex component tree, it can be clunky to pass the state variable as props and inefficient to re-render the entire shared higher level component each time a child component updates state. Enter React Context API for global state management. It allows children components to have access to state variables and state variables' relevant functions without explicitly passing them through the component tree by making them 'global.'</p>
<p><em>Other global statement management solutions are out of the scope of this article, but learn more about other popular options here: <a href="https://javascript.works-hub.com/learn/state-management-battle-in-react-hooks-redux-and-recoil-9977a">State Management Battle in React 2022: Hooks, Redux, and Recoil</a></em></p>
<p>The syntax required for the React Context API global state management consists of: </p>
<ul>
<li>the createContext object</li>
<li>the context provider component</li>
<li>the useContext hook</li>
</ul>
<h2>
 <a href="#the-createcontext-object">
 </a>
 the createContext object
</h2>
<p>The createContext object initializes the use of context in a React application.</p>
<p>To create the createContext object, import React and set a constant equal to React.createContext().<br />
</p>
<div>
<pre><code>import React from 'react';
const GlobalContext = React.createContext();
</code></pre>
<div>
<p>
 Enter fullscreen mode
 
 Exit fullscreen mode
 
</p>
</div>
</div>
<h2>
 <a href="#the-context-provider-component">
 </a>
 the context provider component
</h2>
<p>The context provider component is how global state, and its' relevant functions, are <em>provided</em> to other components in a React application.</p>
<p>In the same file as the createContext object, create a context provider component. Assuming function component syntax; the function should take in the component's children as props and return JSX with a parent component encompassing the children props. Set the name of the parent component equal to the createContext object with .Provider added to the end and pass it a value prop. The value prop will hold the global state relevant data being passed to the children components.</p>
<p>Export the createContext object and the context provider component for use in other areas of the application.<br />
</p>
<div>
<pre><code>import React, {useState} from 'react';
const GlobalContext = React.createContext();
function GlobalProvider({ children }) {
 const [global, setGlobal] = useState(false);
 return (
 &lt;GlobalContext.Provider value={global}&gt;
 {children}
 &lt;/GlobalContext.Provider&gt;
 );
};
export default GlobalProvider;
export { GlobalContext };
</code></pre>
<div>
<p>
 Enter fullscreen mode
 
 Exit fullscreen mode
 
</p>
</div>
</div>
<p>To make the global state data available to other components in the application,