Code Splitting React Router Routes with React Lazy and React Suspense<div><div><figure></figure><p>Recently I’ve got back to creating side projects, which is actually quite refreshing, albeit, with all the technology options, it can be quite time-consuming and daunting to just get started. Anyhow, as I’ve been working on my own side project (I will post it to YouTube at some point), I’ve become much more interested in performance, and as I was optimising my application (which I do after, although if I can get some quick wins along the way, great) I thought the first easy win was to just decrease the bundle size.</p><p>So how do we go about decreasing the bundle size? Well, the first quick win, if you’re using client-side rendering that is, and of course React Router (this does not work with SSR), is to simply split your routes — basically get rid of anything that isn’t directly used on the page the user is visiting.</p><h2>Here’s an example…</h2><p>A user visits your homepage and let’s say the user downloads your initial bundle which isn’t cached at around 320kb, well what is in that bundle for it to be 320kb? Turns out you have 5 additional 5 routes in there (that aren’t being directly used)…so what do we do with those additional 5-page routes that aren’t currently being used on the homepage? The answer is simple, we get rid of them! 🗑️</p><h2>Karl, but what exactly is code splitting?</h2><p>Code splitting is basically the removal of code that the user does not need right now. Prime example… the user visits your website, and the browser downloads the JavaScipt bundle file which includes:</p><p><code>Home, sign in, sign up, faqs, docs</code></p><p>It’s clear that we don’t need <code>sign in, sign up, faqs, docs</code> right now, so we can just remove them from the initial bundle, lowering our bundle size!</p><p>Lowering our bundle size is great because it means our website will load faster and if you’re not caching the JS file downloads, you’re probably saving your users from having to pay extra for data if they’re on mobile!</p><p><strong>Only ship the minimal amount of code to the browser to render the page the user is on!</strong></p><h2>Okay, that’s fine, but how do we do that?</h2><p>Enter dynamic routes, React Suspense and React lazy!</p><p>Let’s say you have a basic React router setup like so:</p><pre>&lt;Router&gt;<br /> &lt;Switch&gt;<br /> &lt;Route path="/sign-in"&gt;<br /> &lt;SignIn /&gt;<br /> &lt;/Route&gt;<br /> &lt;Route path="/sign-up"&gt;<br /> &lt;SignUp /&gt;<br /> &lt;/Route&gt;<br /> &lt;Route exact path="/"&gt;<br /> &lt;Home /&gt;<br /> &lt;/Route&gt;<br /> &lt;/Switch&gt;<br />&lt;/Router&gt;</pre><p>This looks normal, right? Well, it is. Unfortunately, if you look in the dev tools and take a look for your bundle file (take a look, I’m sure you’ll be able to find it!), do a search for the contents that are within sign in or sign up. If you have ‘username’, or ‘email address’ within the sign in or sign up pages, search for it within your bundle, and you will see it’s in there!</p><p>We don’t want it to be in there because we’re not using it right now!</p><p>Of course, don’t forget your imports:</p><pre>import React from 'react';<br />import { BrowserRouter as Router