React 18 Suspense Minimal Example<div><div><figure></figure><p>In the current version of React (<code>17.0.2</code> at the day of this article creation), <code>Suspense</code> is a component, that allows developers to lazy-load application parts. It accepts <code>fallback</code> property, with content to display, while the child component is lazy-loading.</p><figure></figure><p>However, starting with React 18 it will be possible to use <code>Suspense</code> for data fetching. This means, that <code>fallback</code> will be displayed until the component will fetch all the data needed. Or in general, all events that components expect will occur. Let's say we want to just display the placeholder for 2 seconds:</p><figure></figure><p>As you could guess, <code>Loading...</code> will be displayed for 2 seconds and <code>Component loaded</code> afterward.</p><p>However, when I first saw the code above, I didn't understand <em>HOW</em> did that happen... What is that magic mechanism in the <code>useTimeout</code> hook? In short, it has to:</p><ol><li>Stop component code execution.</li><li>Let <code>Suspense</code> know that the component isn't yet ready</li><li>Notify <code>Suspence</code> when it should re-attempt with rendering component.</li></ol><p>To stop code execution you need to use the <code>throw</code> statement. In order to make <code>Suspense</code> know it's expected, the value thrown need to be a <code>Promise</code>. <code>Suspense</code> will catch this promise and subscribe to it, to re-attempt rendering.<br />Please note: the code below is just for a demo purpose:</p><figure></figure><p><em>(Confused about </em><code><em>||=</em></code><em> ? Check </em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment"><em>this doc</em></a><em>)</em></p><p>It turns out that suspense uses quite simple mechanisms, but thereâ€™s a hard part. You might ask why <code>fullfilled</code> and <code>promise</code> couldn't be stored in a ref, so the hook would be reusable:</p><figure></figure><p>It turns out, that while the component is not loaded, hooks canâ€™t be really used. The component will be unmounted/mounted on every render attempt before the render will complete without throwing promises. Hence to figure out, if this component has actually started the data loading process, we should rely on a globally available cache. (In our simplified case itâ€™s just <code>fullfilled</code> variable). Of course, in a real-world example such a simple approach wouldn't work (this hook works only one time).</p><p>This is why itâ€™s advised to use good libraries that support suspense (like <a href="https://swr.vercel.app/">SWR</a>).</p><p><a href="https://codesandbox.io/s/suspense-timeout-example-4g7rh">Full code</a> of the example above.</p><p>ðŸ‘‹</p><p><em>More content at </em><a href="http://plainenglish.io/"><strong><em>plainenglish.io</em></strong></a><em>. Sign up for our </em><a href="http://newsletter.plainenglish.io/"><strong><em>free weekly newsletter</em></strong></a><em>. Get exclusive access to writing opportunities and advice in our </em><a href="https://discord.gg/GtDtUAvyhW"><strong><em>community Discord</em></strong></a><em>.</em></p></div>