Keeping track of the last value of state in React.js<div><div>
 <p>When working with states in React.js, there comes a time when you might need to differentiate between the current and previous <em>“state”</em> of a state.</p>
<p>For instance, you’ve written an event that should only get triggered if the difference between the current and previous state matches a certain value.</p>
<p>Check this simple example.</p>
<div><pre><code>import { useState } from "react";
export default function App() {
 const [name, setName] = useState("Amit");
 return (
 &lt;&gt;
 &lt;h1&gt;Current name: {name}&lt;/h1&gt;
 &lt;button onClick={() =&gt; setName("Cherika")}&gt;Click Me!&lt;/button&gt;
 &lt;/&gt;
 );
}
</code></pre></div>
<p>Here in this component, the initial state for <code>name</code> is “Amit”. Now, when the <em>“Click Me!”</em> button is clicked, the state of <code>name</code> will be <strong>“Cherika”</strong>.</p>
<p>As you can tell, currently, we don’t have any means to check the previous state of <code>name</code> since we are keeping track of it.</p>
<p>To fix this, we can use the <code>useRef</code> hook to create an <a href="https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables">instance variable</a>. This can be used further to store the previous state every time the state of <code>name</code> is updated using the <code>useEffect</code> hook like so.</p>
<div><pre><code>import { useState, useRef, useEffect } from "react";
export default function App() {
 const [name, setName] = useState("Amit");
 const prevName = usePrevious(name);
 return (
 &lt;&gt;
 &lt;h1&gt;Current name: {name}&lt;/h1&gt;
 &lt;h1&gt;Previous name: {prevName}&lt;/h1&gt;
 &lt;button onClick={() =&gt; setName("Cherika")}&gt;Click Me!&lt;/button&gt;
 &lt;/&gt;
 );
}
function usePrevious(value) {
 const ref = useRef();
 useEffect(() =&gt; {
 ref.current = value;
 });
 
 return ref.current;
}
</code></pre></div>
<p>As you can tell, we can create a custom hook called <code>usePrevious</code> which holds the logic to keep the previous state since the <em>“ref”</em> object here is a generic container whose <code>current</code> property is mutable and can hold any value, similar to an instance property on a class.</p>
<p>We can mutate the <code>current</code> property of <em>“ref”</em> inside the <code>useEffect</code> hook with the new state (which would still be the previous state when the button is clicked). And hence, we can keep track of the previous and current states.</p>
<p>Here’s putting it all together!</p>
 </div><p>
 Beep! Beep! I'm also running a <a href="https://www.youtube.com/c/AmitMerchant?sub_confirmation=1">YouTube channel</a> which I hope you're going to love!
 
 </p>