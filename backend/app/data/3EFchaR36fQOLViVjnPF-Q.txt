What is the significance of Suspense for React?<div><div><figure></figure><p>Many of you may not have used <strong>Suspense</strong> in your projects, but Suspense is a very important part of React’s future development.</p><p>This article will explain the significance of Suspense for React.</p><h2>React’s an iterative process</h2><p><strong>React</strong> has undergone three major changes in its main features from v16 to v18:</p><ul><li>v16：Async Mode</li><li>v17：Concurrent Mode</li><li>v18：Concurrent Render</li></ul><p>The main feature of React from v16 to v18 has undergone three major changes: to understand the significance of these three changes, you need to first understand a very confusing concept in React — <strong>render</strong>.</p><p>The render function of a ClassComponent is called render when it is executed：</p><pre>class App extends Component {<br /> render() {<br /> // <br /> }<br />}</pre><p>And the process of rendering the result of render to the page is called commit.</p><p>The purpose of Async Mode is to make rendering asynchronous and interruptible.</p><p>The purpose of Concurrent Mode is to make commit concurrent in the user’s perception.</p><p>Since Concurrent Mode includes breaking change, v18 proposes Concurrent Render to reduce the cost of migration for developers.</p><p>So what does “making commit concurrent in user’s perception” mean?</p><h2>The meaning of “concurrency”</h2><p>When it comes to “concurrency”, we have to mention Suspense. consider the following code:</p><pre>const App = () =&gt; {<br /> const [count, setCount] = useState(0);<br /> useEffect(() =&gt; {<br /> setInterval(() =&gt; {<br /> setCount(count =&gt; count + 1);<br /> }, 1000);<br /> }, []);<br /> return (<br /> &lt;&gt;<br /> &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;<br /> &lt;Sub count={count} /&gt;<br /> &lt;/Suspense&gt;<br /> &lt;div&gt;count is {count}&lt;/div&gt;<br /> &lt;/&gt;<br /> );<br />};</pre><ul><li>An update will be triggered every second, updating the state count to count =&gt; count + 1</li><li>In Sub, an asynchronous request is initiated, and before the request returns, the Suspense wrapping Sub renders the fallback</li></ul><p>Assuming the request returns in three seconds, ideally, the page before and after the request is initiated will be displayed in order as:</p><pre>// Before the request is initiated within Sub<br />&lt;div class=“sub”&gt;I am sub, count is 0&lt;/div&gt;<br />&lt;div&gt;count is 0&lt;/div&gt;// The first second of request initiation within Sub<br />&lt;div&gt;loading...&lt;/div&gt;<br />&lt;div&gt;count is 1&lt;/div&gt;// Sub request initiated in the 2nd second<br />&lt;div&gt;loading...&lt;/div&gt;<br />&lt;div&gt;count is 2&lt;/div&gt;// Request initiated in Sub at 3 seconds<br />&lt;div&gt;loading...&lt;/div&gt;<br />&lt;div&gt;count is 3&lt;/div&gt;// After a successful request within Sub<br />&lt;