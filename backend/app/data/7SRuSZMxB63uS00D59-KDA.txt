Managing UI State in a React App<div><div>
 
 <main>
 <div>
 <article>
 <header>
 <div>
 <p><a href="/bipul"></a>
 </p>
 <div>
 <p><a href="/bipul">Bipul Sharma</a></p><p>
 Posted on <time>Jul 16, 2021</time>
 â€¢ Updated on <time>Mar 7, 2022</time>
 </p>
 </div>
 </div>
 </header>
 <div>
 <h2>
 <a href="#introduction">
 </a>
 Introduction
</h2>
<p>UI State is the state that is only useful for controlling the interactive parts of our React app. The other state being Server-cache(State's stored on the server, and we store in the client for quick-access: like user data).</p>
<p>useState is a Hook that lets you add React state to function components. </p>
<h2>
 <a href="#lifting-state-up">
 </a>
 Lifting State Up
</h2>
<p>If we have 2 sibling components that both need same state(or functions/methods), we need to lift that state to the least parent component and pass the data down to the components that need through props.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTTMSY7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gd2il8izq2st2o2a0bxg.png"></a></p>
<h2>
 <a href="#prop-drilling">
 </a>
 Prop Drilling
</h2>
<p>Now, if some component far away in the component tree needs the state, you need to lift the state all the way to the top and pass props to all intermediate components to get the data down to the component that actually needs it.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhEV3Or---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1hkfnue25av28grsw8f.png"></a></p>
<p>This is what is called prop drilling- passing data from one part of the React Component tree to another by going through other parts that do not need the data but only help in passing it around.</p>
<p>Lets take a simple example:<br />
<a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eFKveLFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rsgpn3djookplatz71e.png"></a></p>
<p>Here, UserPanel component and UserPanelContent component are intermediate components acting as tunnels to get the data down to the Welcome component that actually needs the data.</p>
<h2>
 <a href="#using-composition-to-avoid-prop-drilling">
 </a>
 Using Composition to avoid Prop Drilling
</h2>
<p>Instead of making components that render components and wiring props everywhere like this, you could compose things together through children props.</p>
<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tEwgRBrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j89kp5b0j56cw5gkvukv.png"></a></p>
<p>Using children prop increases the ability to compose