Using React Suspense for Better Server-Side Rendering<div><div><p></p><h2>Improve user experience and performance in server-side rendering with React suspense</h2><p></p><figure></figure><p>Server-side rendering is increasingly becoming popular among web developers. However, implementing server-side rendering in React applications did not meet the expectations and caused a lousy developer and user experience.</p><p>As a result, React included React Suspense in their upcoming React 18 release to improve the performance of server-side rendering in React applications.</p><p>This article will discuss what React Suspense is and how developers can take advantage of it to improve their React applications.</p><h2><strong>Introduction to React Suspense</strong></h2><p>React Suspense is a React component that pauses (suspends) an elementâ€™s rendering unless all the data it requires is available. It assures that data is ready before rendering components and helps avoid loading components with pending data.</p><p>Your child component should implement lazy loading via <code>React.Lazy</code> to use React Suspense. You can even specify multiple lazy loading components with a single <code>Suspense</code> component as well.</p><pre>import React from "react"<br />import Spinner from "components/Spinner"<p>const SomeComponent = React.lazy(() =&gt; import('components/SomeComponent'));</p><p>export default function App(){<br /> return (<br /> &lt;React.Suspense fallback={&lt;Spinner /&gt;}&gt;<br /> &lt;SomeComponent /&gt;<br /> &lt;/React.Suspense&gt;<br /> )<br />}</p></pre><p>As shown above, all you have to do is wrap the component tree with the <code>Suspense</code> component specifying a fallback UI. React then will prioritize rendering based on the availability of the child React components. If some elements are not yet ready, <code>Suspense</code> will continue to show a fallback UI in place of those React components until they are ready.</p><h2><strong>A Primer on Server-side Rendering</strong></h2><p>Server-side rendering is a technique where React components are compiled into HTML server-side and sent to clients. So, end-users will not have to wait till the client-side JavaScript is executed and the application is rendered.</p><p>Server-side rendering is increasingly becoming popular because it solves some major problems with client-side rendering. When a single page application is rendered on the client-side, the user sees a blank screen until JavaScript is executed and the UI is rendered. The larger the size of the application is, the longer the time it takes to render, causing a bad user experience. Also, search engines can only access JavaScript bundles in client-side rendering. Therefore, they cannot crawl and index the web app, which negatively affects the SEO performance.</p><p>In the current method of server-side rendering, the app fetches all data required for the entire application. After data is received, the whole application is compiled to HTML on the server, using the <code>renderToString</code> method. The produced markup is then sent in the response. Finally, the JavaScript is loaded for the entire application on the client-side and connected to the generated HTML.</p><pre>import React from 'react';<br />import { renderToString } from 'react-dom/server';<br />import App from './components/app';<br />module.exports = function render(initialState) {<br /> let content = renderToString(&lt;App /&gt;);<br /> return content<br />};</pre><h2><strong>Challenges in Server-side rendering in React</strong></h2><p>Server-side rendering in React indeed brings many advantages, but it is not a silver bullet. In the current way of implementing server-side rendering, the whole React application is compiled to HTML and then sent to the client. That is, the application should have all data fetched beforehand.</p><p>This process will not cause issues in small projects