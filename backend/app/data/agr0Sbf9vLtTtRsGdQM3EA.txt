Data fetching with Suspense in React<div><section>
 <p>Suspense allows us to suspend component rendering. Suspense in React is not a library or server state manager; itâs literally what the word Suspense entails, a feature for managing asynchronous operations in a React app, keeping things in suspense until data are ready.</p>
<p>In this article, we will look at how Suspense works by fetching data from an API and rendering it in our application. In the course of this article, we will use <a href="https://jsonplaceholder.typicode.com/">Jsonplaceholder</a> for our API.</p>
<h2>Why Suspense?</h2>
<p>Suspense aims to help with handling async operations by letting you wait for a code to load. Itâs needed because users need their eyes fed with something like a spinner, so they know they expect data to be displayed. Concisely, Suspense will defer the execution of a componentâs tree until the Promise is either resolved or rejected. Sites without proper handling of asynchronous operations are considered wretched sites.</p>
<p>How do we fetch data without Suspense? The following code is typical:</p>
<pre><code>const [lyrics, isLoading] = fetchData("/lyrics");
if (isLoading) {
 return &lt;Spinner /&gt;;
}
return &lt;Lyrics data={lyrics} /&gt;;</code></pre>
<p>A variable <code>isLoading</code> is used to track the <code>status</code> of the request. If itâs true, we render a <code>spinner</code>. The spinner is used for a better user interface, enabling the user to know that data is being fetched. Thereâs absolutely nothing wrong if we do it this way, but there are better ways of getting this done. Letâs see the simplest use case of Suspense:</p>
<pre><code>const lyrics = fetchData("/lyrics");
return (
 &lt;Suspense fallback={&lt;Spinner /&gt;}&gt;
 &lt;Lyrics data={lyrics} /&gt;
 &lt;/Suspense&gt;
);</code></pre>
<p>These are the changes that Suspense brought to the way we handle network calls:</p>
<ul>
<li>Instead of doing it by hand, we have Suspense rendering a fallback (spinner) declaratively.</li>
<li>React didnât know there was a network call, so we had to manage the loading state by ourselves. Using Suspense, React identifies that a network call is made and running.</li>
<li>By wrapping the Lyrics component with Suspense, it suspends rendering data until the network call is done.</li>
</ul>
<p>How does React know that a network call was made and is pending, is React that smart? Suspense renders a fallback component, but in no place in the code do we communicate to React that we are making a network request. This is where data fetching libraries such as Axios come into play. For the benefit of this tutorial, we will use Axios to communicate the loading state to React.</p>
<h2>Data fetching using Suspense</h2>
<p>Create a folder, head into your text editor, open your terminal and run the below commands;</p>
<pre><code>npx create-react-app suspense
cd suspense 
npm install react@rc react-dom@rc --save //we need to manually do it this way because Suspense is not yet stable. 
npm install axios --save
npm start</code></pre>
<p>To handle data fetching, we will need a folder; I named mine <code>FetchApi</code>. This folder will have two files: <code>Fetch.js</code> and <code>WrapPromise.js</code>. These files will be responsible for fetching data from our API and communicating to Suspense. We will discuss more on this as we progress in the article for a better understanding.</p>
<h3>Fetch.Js</h3>
<p>We will use <a