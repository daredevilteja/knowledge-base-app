The Suspense is Killing Me: Part 2<div><section><p>I have to admit, I didn’t intend to put a year between two parts to create… suspense. Yet, here we are. The past year was full of updates and most importantly, <a href="https://reactjs.org/blog/2022/03/29/react-v18.html">React 18 is shipped</a> with some of the features I mentioned in the previous post.</p>
<p>Let’s quickly go over some of the most important things that happened in the last year and what got shipped.</p>
<h2><a href="#what-happened-in-the-meantime"></a>What happened in the meantime</h2>
<h3><a href="#react-18-working-group"></a>React 18 Working Group</h3>
<p>React team created this <a href="https://github.com/reactwg/react-18/discussions">discussion board</a> to announce updates and gather feedback from community leaders. It provided a lot of in-depth information, and the feedback received shaped some APIs to have better ergonomics and support unforeseen use cases.</p>
<h3><a href="#react-18-release"></a>React 18 Release</h3>
<p>Around a year after the announcement of the working group, and after a few prereleases, <a href="https://reactjs.org/blog/2022/03/29/react-v18.html">React 18 was released</a> as stable. It came with important features such as streaming SSR with Suspense, transitions API, automatic batching, and a few new hooks.</p>
<h3><a href="#a-new-react-labs-post"></a>A new React Labs post</h3>
<p>React Labs was announced before my last post, providing architectural deep dives in video format. It didn’t receive any updates, but a blog post featuring active exploration areas <a href="https://reactjs.org/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.html">recently come up</a> in React blog.</p>
<hr />
<p>With all these, we now have a more complete vision of the React team and what’s coming next. In the first part, I mentioned some of the most exciting features that I expected to land with React 18. Some of them actually landed, others were pushed back, and there were features that I didn’t even know about. So, first let’s go over the important features that are new in React 18.</p>
<h2><a href="#whats-new-in-react-18"></a>What’s new in React 18</h2>
<h3><a href="#no-more-concurrent-mode"></a>No more Concurrent Mode</h3>
<p>The now removed React docs about concurrent features mentioned three modes: Legacy, Blocking, and Concurrent. This distinction didn’t land in React 18, in favor of <a href="https://github.com/reactwg/react-18/discussions/64">enabling concurrency only in subtrees</a> that use those features, for backward compatibility. If you don’t use concurrent features, your React app will work and behave as before.</p>
<h3><a href="#transitions"></a>Transitions</h3>
<p>This is one of the aforementioned concurrent features. While state updates will keep working the same as before, you can mark a state update as a <a href="https://github.com/reactwg/react-18/discussions/41">“transition”</a>, by wrapping it in a <code>startTransition</code> call to let React know that it is not an urgent update and more urgent updates are allowed to interrupt it. A non-urgent update is rendered concurrently, so, as a bonus, it enables time-slicing. You can use the hook version (<code>useTransition</code>) to show the user that an update is pending, or use the <code>useDeferredValue</code> hook to achieve a similar effect when you have no control over setting the state. (Transitions are opt-in for now but they may become the