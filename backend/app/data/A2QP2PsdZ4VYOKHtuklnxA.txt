Past, Present, and Future of React State Management<div><section><article><p>React was introduced in May 2013. Its paradigm shift was that <strong>your UI was a function of your state</strong>. Given some component state, React can determine what your component will look like. React is <em>built</em> upon the idea of state. However, state has long been one of the most difficult parts of building a React application.</p>
<p>Let's imagine state management in React as a rugged tool belt. You've used this tool belt for years, slowly adding new tools as needed. Each tool serves a very specific purpose. You don't use your hammer to screw in bolts. As a craftsman, you've learned the right time and place to use each tool.</p>
<p><strong>State management with React is a rugged tool belt, but not everyone has the prior experience to know which tool to reach for.</strong> This post will explain the past, present, and future of state management to help you make the correct decision for your team, project, or organization.</p>
<h2><a href="#glossary"></a>Glossary</h2>
<p>Before we begin, it's critical you understand some of the terms commonly used. These aren't the canonical names. A few different variations of each float around, but the underlying ideas are the same:</p>
<ul>
<li>UI State – State used for controlling interactive parts of our application (e.g. dark mode toggle, modals).</li>
<li>Server Cache State – State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places).</li>
<li>Form State – The many different states of a form (e.g. loading, submitting, disabled, validation, retrying). There's also <a href="https://reactjs.org/docs/forms.html">controlled &amp; uncontrolled form state</a>.</li>
<li>URL State – State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered)</li>
<li>State Machine – An explicit model of your state over time (e.g. a stoplight goes from green → yellow → red, but never green → red).</li>
</ul>
<h2><a href="#past"></a>Past</h2>
<p>React's component model helped create reusable, composable applications. Each component had its own local state. As web apps became more complex, new solutions emerged to more easily share logic between components.</p>
<h3><a href="#timeline"></a>Timeline</h3>
<p>To help you understand how state management has evolved over time, here's a rough timeline of popular state management solutions in React. This list is heavily focused on UI State. This list is not comprehensive, but is enough to give context.</p>
<ul>
<li>2013 – Introduction</li>
<li>2014 – Flux (many libraries)</li>
<li>2015 – Redux</li>
<li>2016 – MobX</li>
<li>2018 – Context</li>
<li>2019 – Hooks Introduced (+ React Query, SWR)</li>
<li>2019 – Zustand</li>
<li>2019 – xState</li>
<li>2020 – Jotai, Recoil, Valtio</li>
<li>2021 – useSelectedContext</li>
</ul>
<p>Just because an item is listed on this timeline does not mean you need to learn it. More on this later. Let's dive into the history of state management in React.</p>
<h3><a href="#redux"></a>Redux</h3>
<p><a href="https://redux-toolkit.js.org/">Redux</a> was originally created as an implementation of the "<a href="https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/#redux-was-built-as-a-flux-architecture-implementation">Flux Architecture</a>", which was a pattern first suggested by Facebook in 2014. Redux came out in 2015 and quickly became the most popular of many Flux-inspired libraries. It's ecosystem of tools and libraries encapsulated both UI state