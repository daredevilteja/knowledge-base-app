Let‚Äôs build a React from scratch: Part 3‚Äî React Suspense and Concurrent Mode<div><div><blockquote><p><strong>Disclaimer</strong>: The content below is just for learning and have some key insights while using framework like React. While the inspiration is React, the idea is to deliver the core concepts of what it takes to build a library like React at its most basic level.</p></blockquote><p>Hello there! Welcome to the 3rd Part of this Series, which talks about Performance a bit while using libraries like React. What are the traditional bottlenecks for large applications and how React is planning on solving them by introducing <strong>React Suspense</strong> and <strong>Concurrent Mode?</strong> To be honest, I didn‚Äôt plan the timeline but it so turned out that <strong>React 18</strong> which packs all these awesome features just got released <strong>yesterday</strong> for general usage.</p><figure></figure><p>So, it will be an <strong>amazing time to talk about them and have a deep understanding </strong>of how <strong>these actually work</strong>. The bottom line, it can make your app really fast and predictable even with slow computing or slow network connections.</p><p><strong>Concurrent rendering</strong> also <strong>unveils the door for progressive server-side rendering </strong>as well. Now all of these might seem alien to you (at least, it was to me), so as always <strong><em>we will start from the basics and build our way up to all these by implementing them</em></strong>. This time, there will be a little bit of theory before hands-on coding, but the concepts will go a long way in helping us build what we are aiming for. So, let‚Äôs get started...</p><ul><li><a href="/lets-build-a-react-from-scratch-part-1-virtualdom-and-renderer-14f4f716de62">Part 1 ‚Äî VirtualDOM and React renderer</a></li><li><a href="/lets-build-a-react-from-scratch-part-2-state-management-and-react-hooks-e771c5c06066">Part 2 ‚Äî State Management and React Hooks</a></li><li><strong>Part 3 ‚Äî React Suspense and Concurrent Mode</strong></li><li><a href="/lets-build-a-react-from-scratch-part-4-server-side-rendering-and-its-challenges-b7b87c84bbf">Part 4 ‚Äî Server Side Rendering and its Challenges</a></li></ul><h2>ü¶Å React Rendering Techniques üêí</h2><p>In the first section, we talked about how we take a VirtualDOM and render it out to the Browser. But sometimes(most of the time :)), <strong>you have to fetch the data from some remote API </strong>before you <strong>can use that to render it to the DOM</strong>. Now, in general, in react for these there are <strong>three primitive rendering techniques, let‚Äôs discuss them briefly here</strong>,</p><h2>Approach 1: Fetch-on-Render (not using Suspense)</h2><p>The first, and most traditional approach would be to manage<strong> the fetching after the initial render and when the data is ready</strong>, we populate the same using <strong>our States in React</strong>. Let‚Äôs see a quick example,</p><pre>function ProfilePage() {<br /> const [user, setUser] = useState(null);<strong><em>useEffect(() =&gt; {<br /> fetchUser().then(u =&gt; setUser(u));<br /> }, []);</em></strong>if (user === null) {<br /> return &lt;p&gt;Loading profile...&lt;/p&gt;;<br /> }<br /> return (<br /> &lt;&gt;<br /> &lt;h1&gt;{user.name}&lt;/h1&gt;<