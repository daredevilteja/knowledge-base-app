How to choose the best state management solution in React<div><div><div><p><p>IK</p></p><div><p>Iva Kop</p><p><time>3 July 2021</time> · 14 min read</p></div></div><p>State management is a fundamental challenge every developer needs to face when building a React app — and it is not a trivial one. There are many valid ways to manage state in React, and each one solves a salient set of problems.</p>
<p>As developers, it is important not only to be aware of the different approaches, tools, and patterns, but to also understand their use cases and trade-offs.</p>
<p>A helpful way to think about state management is in terms of the problems we solve in our projects. So, I will use a simple counter app to illustrate some relevant ways to think about state in React.</p>
<h2>Local component state in React</h2>
<p>The simplest way to implement the counter is to use local component state with the <code>useState</code> hook.</p>
<pre><code>import { useState } from 'react';
const Counter = () =&gt; {
 const [count, setCount] = useState(0);
 const increaseCount = () =&gt; {
 setCount(count + 1);
 };
 const decreaseCount = () =&gt; {
 if (count &gt; 0) {
 setCount(count - 1);
 }
 };
 return (
 &lt;div&gt;
 &lt;h1&gt;{count}&lt;/h1&gt;
 &lt;button onClick={decreaseCount}&gt;-&lt;/button&gt;
 &lt;button onClick={increaseCount}&gt;+&lt;/button&gt;
 &lt;/div&gt;
 );
};
export default Counter;
</code></pre>
<p>So we are done, right? Article over? Not quite.</p>
<p>If this was a real project, it is likely that in the future, we would need more buttons and headers elsewhere in our app. And it is a good idea to make sure they all look and behave consistently, which is why we should probably turn them into reusable React components.</p>
<h2>Component props in React</h2>
<p>Turning our <code>Button</code> and <code>Header</code> into separate components reveals a new challenge. We need some way to communicate between them and the main <code>Counter</code> component.</p>
<p>This is where component props come into play. For our <code>Header</code> component, we add a <code>text</code> prop. For our <code>Button</code>, we need both a <code>label</code> prop and an <code>onClick</code> callback. Our code now looks like this:</p>
<pre><code>import { useState } from 'react';
const Header = ({ text }) =&gt; &lt;h1&gt;{text}&lt;/h1&gt;;
const Button = ({ label, onClick }) =&gt; (
 &lt;button onClick={onClick}&gt;{label}&lt;/button&gt;
);
const Counter = () =&gt; {
 const [count, setCount] = useState(0);
 const increaseCount = () =&gt; {
 setCount(count + 1);
 };
 const decreaseCount = () =&gt; {
 if (count &gt; 0) {
 setCount(count - 1);
 }
 };
 return (
 &lt;div&gt;
 &lt;Header text={count} /&gt;
 &lt;Button onClick={decreaseCount} label="-" /&gt;
 &lt;Button onClick={increaseCount} label="+" /&gt;
 &lt;/div&gt;
 );
};
export default Counter;
</code></pre>
<p>This looks great! But imagine the following scenario: what if we need to only display the count on our home route and have a separate route <code>/controls</code> where we display both the count and the control buttons? How should we go about this?</p>
<h2>Routing in React</h2>