Understanding the Suspense API in React 18<div><div><p></p><h2>What is the new ReactJS Suspense API and when should you use it?</h2><p></p><figure><figcaption>Photo by <a href="https://unsplash.com/@mike_van_den_bos?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Mike van den Bos</a> on <a href="https://unsplash.com/s/photos/loading?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>When components start to get big and you have many of them on the same page, you might want to start optimizing the way and the moment they get downloaded into your client’s browser.</p><p>For that React provides you with the <code>lazy</code> method, which allows you to mark components as “lazy”. This in turn means they get downloaded the first time they’re used and not before.</p><p>This is a fantastic way to decrease the “time to first pixel” and other metrics that measure the amount of time your app takes to render for the first time and the time it takes to be “ready” for interactions.</p><p>But when you use this optimization, you run into a bit of a problem: what happens if the component takes too long to download? Especially in slow connection environments, this can be a problem.</p><p>What should your app show? How can you let your user know that something is happening even though they can’t see it?</p><p>That’s where the Suspense API comes into play, so let’s take a look at it!</p></div><div><h2>What is the Suspense API?</h2><p>The Suspense API works in conjunction with “lazy” components to let your users know that they’re loading something in the background, while they’re loading it.</p><p>It does so by providing an alternative visualization (a different component) while the slow, lazy component is being downloaded for the first time.</p><p>The premise here is that this alternative component is a low smaller and most likely can be reused in many different places. That way the trade-off makes sense.</p><p>Think about Suspense as a way to show the “loading…” message, the spinning wheel or even the type of skeleton component while the actual one is being processed and downloaded.</p><p>Using requires you to simply wrap your lazy components with the <code>Suspense</code> one while specifying the <code>fallback</code> property. Like this:</p><figure></figure><p>As you can see, both the <code>Text</code> and <code>Buttons</code> components are lazy, and loading either of them will require a request to the server. The “Toggle” link simply alternates between both of them.</p><p>Now the interesting bit here is that the <code>Suspense</code> component doesn’t have to directly wrap the lazy components. They can be many levels down the tree, and the fallback would be shown anyway. So you don’t have to worry about wrapping every single component with it, you can wrap a whole section of your component tree and have them all use the same fallback.</p><figure></figure><p>Look at the above GIF, it starts off with a white screen because it’s slowly (notice the Slow 3G setting on the Network tab) downloading the initial page. Immediately after, you’ll see the “Waiting for content…” message, that’s the <code>Waiting</code> fallback.</p><p>Then it gets replaced by a text message, that’s the <code>Text</code> component that was loaded. We’re seeing here the Suspense API in action.</p><p>Then when I click on the “Toggle” link, you’ll see the “Waiting for content…” message again for a few seconds, while the browser is downloading